/*
 * PUT_SNAP.C: generic method for snapshot output.
 * Joshua E. Barnes  3-June-87  Princeton NJ.
 */

/*
 * PutSnap is a generic method for writing snapshot data to a file,
 * to be #included in the compilation of an application program:
 *
 *	#define Body      ...
 *	#define Mass(b)   ...
 *	#define Phase(b)  ...
 *
 *	#include <snapshot/snapshot.h>
 *	#include <snapshot/put_snap.c>
 *
 * The simplest way to use PutSnap is probably as follows:
 *
 *	stream outstr;
 *	Body *btab;
 *	int nbody, bits;
 *	real tsnap;
 *
 *	bits = <required_bits>;
 *	PutSnap(outstr, &btab, &nbody, &tsnap, &bits);
 *
 * Notes: (1) PutSnap() decides what data to output by looking at its
 * last argument, which is a word with a bit set for each component,
 * defined in snapshot/snapshot.h. (2) The name PutSnap is a macro,
 * defined by put_snap.c, so the include statement must come
 * before the first usage. (3) The vanilla PutSnap or any subsidiary
 * routine may be replaced by giving the macro name a definition before
 * including put_snap.c.  For example, to supply your own definition of
 * the mass-output routine, do the following:
 *
 *	#define PutMass  my_put_mass
 *
 *	#include <snapshot/put_snap.c>
 *
 *	local my_put_mass(....) {....}
 *
 * Look at the definition of the standard function(s) you are replacing to
 * find out what arguments to expect.
 */

/*
 * PutSnapParam: working routine to output snapshot parameters.
 */

#ifndef PutSnapParam

#define PutSnapParam  _put_snap_param

local _put_snap_param(outstr, btptr, nbptr, tsptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
real *tsptr;			/* pointer to time of output */
int *ofptr;			/* pointer to output bit flags */
{
    put_set(outstr, ParametersTag);
    put_data(outstr, NobjTag, IntType, nbptr, 0);
    if (*ofptr & TimeBit)
	put_data(outstr, TimeTag, RealType, tsptr, 0);
    put_tes(outstr, ParametersTag);
}

#endif

/*
 * PutSnapCsys: worker routine to output coordinate system.
 */

#ifndef PutSnapCsys

#define PutSnapCsys  _put_snap_csys

local _put_snap_csys(outstr, ofptr)
stream outstr;			/* output stream, of course */
int *ofptr;			/* pointer to output bit flags */
{
    int cs = CSCode(Cartesian, NDIM, 2);

    put_data(outstr, CoordSystemTag, IntType, &cs, 0);
}

#endif

/*
 * PutSnapMass: worker routine to output mass data.
 */

#ifndef PutSnapMass

#define PutSnapMass  _put_snap_mass

local _put_snap_mass(outstr, btptr, nbptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
int *ofptr;			/* pointer to output bit flags */
{
    char *malloc();
    real *mbuf, *mp;
    Body *bp;

    if (*ofptr & MassBit) {
#ifdef Mass
	mbuf = (real *) malloc(*nbptr * sizeof(real));
	if (mbuf == NULL)
	    error("put_snap_mass: not enuf memory\n");
	for (bp = *btptr, mp = mbuf; bp < *btptr + *nbptr; bp++)
	    *mp++ = Mass(bp);;
	put_data(outstr, MassTag, RealType, mbuf, *nbptr, 0);
	free(mbuf);
#else
	error("put_snap_mass: Mass undefined\n");
#endif
    }
}

#endif

/*
 * PutSnapPhase: worker routine to output phasespace data.
 */

#ifndef PutSnapPhase

#define PutSnapPhase  _put_snap_phase

local _put_snap_phase(outstr, btptr, nbptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
int *ofptr;			/* pointer to output bit flags */
{
    char *malloc();
    real *rvbuf, *rvp;
    Body *bp;

    if (*ofptr & PhaseSpaceBit) {
#ifdef Phase
	rvbuf = (real *) malloc(*nbptr * 2 * NDIM * sizeof(real));
	if (rvbuf == NULL)
	    error("put_snap_phase: not enuf memory\n");
	for (bp = *btptr, rvp = rvbuf; bp < *btptr + *nbptr; bp++) {
	    SETV(rvp, Phase(bp)[0]);
	    rvp += NDIM;
	    SETV(rvp, Phase(bp)[1]);
	    rvp += NDIM;
	}
	put_data(outstr, PhaseSpaceTag, RealType, rvbuf, *nbptr, 2, NDIM, 0);
	free(rvbuf);
#else
	error("put_snap_phase: Phase undefined\n");
#endif
    }
}

#endif

/*
 * PutSnapPhi: worker routine to output potential.
 */

#ifndef PutSnapPhi

#define PutSnapPhi  _put_snap_phi

local _put_snap_phi(outstr, btptr, nbptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
int *ofptr;			/* pointer to output bit flags */
{
    char *malloc();
    real *pbuf, *pp;
    Body *bp;

    if (*ofptr & PotentialBit) {
#ifdef Phi
	pbuf = (real *) malloc(*nbptr * sizeof(real));
	if (pbuf == NULL)
	    error("put_snap_phi: not enuf memory\n");
	for (bp = *btptr, pp = pbuf; bp < *btptr + *nbptr; bp++)
	    *pp++ = Phi(bp);
	put_data(outstr, PotentialTag, RealType, pbuf, *nbptr, 0);
	free(pbuf);
#else
	error("put_snap_phi: Potential undefined\n");
#endif
    }
}

#endif

/*
 * PutSnapAcc: worker routine to output acceleration.
 */

#ifndef PutSnapAcc

#define PutSnapAcc  _put_snap_acc

local _put_snap_acc(outstr, btptr, nbptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
int *ofptr;			/* pointer to output bit flags */
{
    char *malloc();
    real *abuf, *ap;
    Body *bp;

    if (*ofptr & AccelerationBit) {
#ifdef Acc
	abuf = (real *) malloc(*nbptr * NDIM * sizeof(real));
	if (abuf == NULL)
	    error("put_snap_acc: not enuf memory\n");
	for (bp = *btptr, ap = abuf; bp < *btptr + *nbptr; bp++) {
	    SETV(ap, Acc(bp));
	    ap += NDIM;
	}
	put_data(outstr, AccelerationTag, RealType, abuf, *nbptr, NDIM, 0);
	free(abuf);
#else
	error("put_snap_acc: Acceleration undefined\n");
#endif
    }
}

#endif

/*
 * PutSnapAux: drone routine does nothing.
 */

#ifndef PutSnapAux

#define PutSnapAux  _put_snap_aux

local _put_snap_aux(outstr, btptr, nbptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
int *ofptr;			/* pointer to output bit flags */
{
    if (*ofptr & AuxBit)
	error("put_snap_aux: not implemented\n");
}

#endif

/*
 * PutSnapKey: drone routine does nothing.
 */

#ifndef PutSnapKey

#define PutSnapKey  _put_snap_key

local _put_snap_key(outstr, btptr, nbptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
int *ofptr;			/* pointer to output bit flags */
{
    if (*ofptr & KeyBit)
	error("put_snap_key: not implemented\n");
}

#endif

/*
 * PutSnapBody: managing routine for output of particle data.
 */

#ifndef PutSnapBody

#define PutSnapBody  _put_snap_body

local _put_snap_body(outstr, btptr, nbptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
int *ofptr;			/* pointer to output bit flags */
{
    if (*ofptr & (MassBit | PhaseSpaceBit | PotentialBit |
		    AccelerationBit | AuxBit | KeyBit)) {
	put_set(outstr, ParticlesTag);
	PutSnapCsys(outstr, ofptr);
	PutSnapMass(outstr, btptr, nbptr, ofptr);
	PutSnapPhase(outstr, btptr, nbptr, ofptr);
	PutSnapPhi(outstr, btptr, nbptr, ofptr);
	PutSnapAcc(outstr, btptr, nbptr, ofptr);
	PutSnapAux(outstr, btptr, nbptr, ofptr);
	PutSnapKey(outstr, btptr, nbptr, ofptr);
	put_tes(outstr, ParticlesTag);
    }
}

#endif

/*
 * PutSnapDiagnostics: drone routine does nothing.
 */

#ifndef PutSnapDiagnostics

#define PutSnapDiagnostics  _put_snap_diagnostics

local _put_snap_diagnostics(outstr, ofptr)
stream outstr;			/* output stream, of course */
int *ofptr;			/* pointer to output bit flags */
{
    if (*ofptr & (EnergyBit | KETensorBit | PETensorBit |
		    AMTensorBit | CMPhaseSpaceBit))
	error("put_snap_diagnostics: not implemented\n");
}

#endif

/*
 * PutSnap: controling routine for snapshot output.
 */

#ifndef PutSnap

#define PutSnap  _put_snap

local _put_snap(outstr, btptr, nbptr, tsptr, ofptr)
stream outstr;			/* output stream, of course */
Body **btptr;			/* pointer to body array */
int *nbptr;			/* pointer to number of bodies */
real *tsptr;			/* pointer to time of output */
int *ofptr;			/* pointer to output bit flags */
{
    if (ofptr) {
	put_set(outstr, SnapShotTag);
	PutSnapParam(outstr, btptr, nbptr, tsptr, ofptr);
	PutSnapBody(outstr, btptr, nbptr, ofptr);
	PutSnapDiagnostics(outstr, ofptr);
	put_tes(outstr, SnapShotTag);
	fflush(outstr);
    }
}

#endif
