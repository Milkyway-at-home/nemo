.TH ROTCURSHAPE 1NEMO "30 January 2008"
.SH NAME
rotcurshape \- fit parameters to a velocity field using shaped rotation curves in a co-planar disk
.SH SYNOPSIS
\fBrotcurshape in=\fPvelfie [parameters=values ...]
.SH DESCRIPTION
\fIrotcurshape\fP derives the rotation curve and kinematic parameters from an observed
velocity field of a coplanar galactic disk by fitting a (set of) rotation curve shape(s).
Instead of dividing the galactic disk in a set of rings (see \fIrotcur(1NEMO)\fP)
it fits the shape of the rotation curve in an annulus of a planar disk. This is particularly
useful for low inclination galaxies and/or for central regions of a galaxy where
normally the rotation curve would vary accross the ring/annulus.
.PP
Much like \fIrotcur\fP, this program does a non-linear least-squares-fit to the function:
.PP
.cs 1 20
.ss 20
.nf
         v(x,y) = VSYS + VROT(r) * cos(theta) * sin(INC)

where again

                      - (x-XPOS) * sin(PA) + (y-YPOS) * cos(PA) 
          cos(theta) = -----------------------------------------
                                       r

.cs 1
.fi
and where the radius \fIr\fP is measured in the plane of the galaxy:
.PP
The parameterized  rotation curve VROT(r;p1,p2,...pN) can be selected from a number of predefined
shapes or dynamically loaded from a C-coded routine (see ROTCUR FUNCTIONS below). Up to 5
functions can be added in quadrature (but be aware of degeneracies)
.PP
In the above formula
\fIv(x,y)\fP denotes the radial velocity at rectangular sky
coordinates \fIx\fP and \fIy\fP, \fIVSYS\fP the systemic 
velocity, \fIVROT\fP the rotational
velocity, \fIINC\fP the inclination angle and \fItheta\fP the 
azimuthal distance
from the major axis in the plane of the galaxy.  
In itself, \fItheta\fP is a function of
the inclination (\fIINC\fP) and the 
position angle (\fIPA\fP) of the major axis.
\fIXPOS\fP and \fIYPOS\fP denote the position of the rotation center
in pixels w.r.t. 0,0 being the lower left corner of the map
(note that MIRIAD and GIPSY all have different conventions where
0,0 is).
 \fIrotcurshape\fP
can fit the 5 geometric parameters
\fIVSYS\fP, \fIINC\fP, \fIPA\fP, \fIXPOS\fP and \fIYPOS\fP, 
though any combination of them can be fixed
(see \fBfixed=\fP).
The position angle \fIPA\fP of the major axis is defined as the
angle, taken in anti-clockwise direction between the north direction on
the ``sky'' and the major axis of the receding half (positive 
radial velocity) of the galaxy. 
.PP
Values equal the undefined value (currently 0.0) are ignored in the
fit. See \fIccdmath(1NEMO)\fP or \fIfitsccd(1NEMO)\fP on how to
create a velocity field with such undefined values (see also
EXAMPLES below).
.SH PARAMETERS
The following parameters are known (those with ** are still here
since we cloned this program off rotcur, but are likely to be slashed or
(re)implemented):
.TP 25
\fBin\fP=\fIv_image|xyv_tab|rv_tab\fP
Input velocity field map, normally in \fIimage(5NEMO)\fP format.
Input data can also be a table, see \fBimagemode=\fP and \fBrotcurmode=\fP below
how to control the input table.
No default.
.TP
\fBradii\fP=\fIr0,r1\fP
Inner and outer radius of the disk to fit (in arcsec).
For images, the \fBunits=\fP keyword can be used to
scale your physical units in the header to ``human readable'' units
(arcsec). By default the whole disk will be used.
.TP
\fBpa\fP=\fIpa\fP
Kinematic position angle (in degrees) of the disk (i.e. receding side).
Angles can be 0..360 or -180..180.
.TP
\fBinc\fP=\fIinc\fP
Inclination (degrees) of the disk. Angles can be 0..90.
.TP
\fBvsys\fP=\fIv0\fP
Systemic velocity.
.TP
\fBcenter\fP=\fIx0,y0\fP
Rotation center (grid units w.r.t. lower left corner being
0,0 for NEMO maps). Two numbers are required. For tabular input
the units must be the same as those used in the table.
Default: center of map.
.TP
\fBfrang\fP=
free angle around minor axis (degrees), in the plane of
the galaxy, from which data is excluded from
the fit (thus the total cone size of ignored data around
the minor axis is 2*\fBfrang\fP)
[Default: \fB0.0\fP].
.TP
\fBside\fP=
Choose the side of the galaxy to fit the velocity field to.
Valid options are \fBreceding\fP, \fBapproaching\fP 
or \fBboth\fP side(s). [Default: \fBboth\fP].
.TP
\fBweight\fP=
Choice of geometric weighting function with which points are weighed into
the least squares solution as a function of galactic angle away
from the major axis. Valid options are: \fBuniform\fP, \fBcosine\fP,
and \fBcos-squared\fP.  If a density is given (see \fBdens=\fP),
the weight function is multiplied by this geometric weight factor.
[Default: \fBuniform\fP].
.TP
\fBfixed\fP=
List of disk geometry parameters to be kept fixed during the fit.
Choose any of the
following: \fBvsys,pa,inc,xpos,ypos\fP, although \fBall\fP can also
be use to fix all geometric parameters.
[Default: none, i.e. all parameters free]
.TP
** \fBellips\fP=
The names of two parameters for which to calculate an error ellips. 
(see \fBfixed=\fP). For the two parameters it shows the major
and minor axis, position angle of the one sigma deviation ellipse.
[Default: not used]
.TP
** \fBbeam\fP=
The beam size (FWHM) for beam correction. One or two numbers required.
Currently these are only used to correct error bars for the number
of independant points per beam. If not given, each point is assumed
independant. [no correction]. ** See CAVEATS below **
.TP
\fBdens\fP=\fIimage_den\fP
Image containing the density. Currently only used as an additional
weight factor. If a map of velocity dispersions would be available,
a density map would need to be contstructed from its inverse square,
i.e. dens=1/sigma^2.
Default: not used.
.TP
\fBtab\fP=
If specified, this output table is used in \fIappend\fP mode!
**deprecated**
[Default: not used].
.TP
\fBresid\fP=
Residuals (OBS-FIT) if specified. If the input file was a table
(see also \fBimagemode=\fP), this will contain a listing of X, 
Y, Velocity and Residual Velocities in the disk, else
it will be an \fIimage(5NEMO)\fP of the residuals.
Note for \fBnsigma>0\fP the residual map will be two maps, and
you will need \fIcsf(1NEMO)\fP to get access to the 2nd (supposedly improved)
residual map.
[Default: not used].
.TP
\fBfit=t|f\fP
Controls if the residual output map (\fBresid=\fP should contain the
residuals [the default], or the fitted map. If the fit is selected,
the mask values are ignored and the map is filled with the fitted values.
[Default: \fBf\fP]
.TP
\fBtol\fP=
Tolerance for convergence of \fInllsqfit\fP [Default: \fB0.001\fP].
.TP
\fBlab\fP=
Mixing parameter for \fInllsqfit\fP [Default: \fB0.001\fP]
.TP
\fBitmax\fP=
Maximum number of allowed \fInllsqfit\fP iterations [Default: \fB50\fP]
.TP
\fBunits\fP=
Units of input axes for radius and velocity. Valid options are
\fBdeg, arcmin, arcsec, rad\fP for radius.
A numeric value can also be given,
in which case your image pixel separation from the
image header is multiplied by this
number to get to the ``arcsec'' that will be quoted in
the tables. The units for velocity can only be numeric, and will be the
factor by which the velocities in the map are multiplied. For tabular input
the spatial scaling factor is ignored, since all spatial coordinates
need to be in the same coordinate system.
[Default: \fBdeg\fP]
.TP
\fBblank=\fP
Value of the blank pixel that needs to be ignored. [Default: \fB0.0\fP].
.TP
\fBnsigma=\fP
Reject outlier points will fall outside nsigma times the dispersion 
away from the mean velocity in the disk. By default, it will not reject any outliers.
Use with care, only useful if close enough to a solution and just a few outliers
need to be removed. 
.TP
\fBimagemode=t|f\fP
Image input file mode? By default the input file is an image, alternatively a simple
ascii table with X and Y positions in columns 1 and 2, and radial velocities
in column 3 can be used by the \fIxyv_tab\fP (see \fBin=\fP).
The units of the spatial coordinates now need to be the same as \fBcenter=\fP,
and the \fBunits=\fP factor is ignored in this case.
Future expansion will likely allow weight factors to be added
in other columns.
[Default: t]
.TP
\fBrotcurmode=t|f\fP
Input table is a rotation curve (R,V) in columns 1 and 2. Radius is allowed
to be negative, as this option is implemted as a special version of XYV where
we fix XPOS=0,INC=30,PA=0. The center can therefore be fitted via YPOS.
Note that \fItabnllsqfit(1NEMO)\fP is also quite efficient to use, except
the rotation curve functions would need to be re-written in their
function interface. See also func_rotcur.c for a useful helper routine.
.TP
\fBload=\fP\fIso_file\fP
Name of a shared object file containing rotation curve(s). The function names 
must be \fBrotcur_\fP\fIname\fP, where \fIname\fP is the identifier name of the
rotation curve used in the subsquent \fBrotcur#=\fP keywords.
.TP
\fBrotcur1=\fP\fIname1,p1,p2,...pN,m1,m2,..mN\fP
Name of first rotation curve, followed by the initial estimates of its
parameters (you do need to know how many there are),
followed by an equal number of 1s (free) and 0s (fixed) to denote
which parameters are free or fixed during the fitting process. 
.TP
\fBrotcur2=\fP\fIname2...\fP
see rotcur1
.TP
\fBrotcur3=\fP\fIname3...\fP
see rotcur1
.TP
\fBrotcur4=\fP\fIname4...\fP
see rotcur1
.TP
\fBrotcur5=\fP\fIname5...\fP
see rotcur1.  The final composite rotation curve will be the sum
(in quadrature) of up to these 5 components.
.SH ROTCUR FUNCTIONS
A \fIrotcur\fP function needs to provide a routine that returns
a rotation curve, as well as all of its partial derivates w.r.t.
the parameters. Most rotation curve shapes have two parameters,
a velocity and a radial scale parameter, and they are usually
the first and second parameter. Note that the user needs to know how
many parameters a \fIrotcur\fP function has. Apart from a number
of pre-defined ones, the user can write his/her own in the C language
and loaded via the \fBload=\fP keyword (see also 
\fIloadobj(3NEMO)\fP.
.PP
Here are two examples, a simple linear rotation curve with one parameter, and a  
slightly more involved Plummer disk/sphere rotation curve with two parameters:
.nf

#include <nemo.h>

real rotcur_linear(real r, int n, real *p, real *d)
{
  d[0] = r;
  return p[0] * r;
}

real rotcur_plummer(real r, int np, real *p, real *d)
{
  real x = radius/p[1];
  real y = pow(1+x*x,-0.75);
  d[0] = y;
  d[1] = -x*p[0]/p[1]*(1-x*x/2)/(1+x*x)/y;
  return p[0] * x * y;
}
.fi
.PP
Here is a list of the builtin rotation curves, where x=r/a is the dimensionless radius:
.nf
.ta +0.6i +0.8i +2.5i
Name:	Parameters:	Formula:				Comments:
-----	-----------	--------				---------
linear	omega   	v=omega*r				-
flat	v0       	v=v0					should return rotcur solution
plummer	v0,a    	v=v0*x/(1+x^2)^(3/4)			-
core1	v0,a      	v=v0*x/(1+x)				-
core2	v0,a    	v=v0*x/(1+x^2)^(1/2)			-
core	v0,a,c  	v=v0*x/(1+x^c)^(1/c)			-
poly	v0,a,p2,.. 	v=v0*(x+p2*x^2+p3*x^3+.....pN*x^N) 	a needs to be fixed !
iso	v0,a    	v=v0*sqrt(1-atan(x)/x)			-
exp 	v0,a    	v=v0*(1-exp(-x))                 	-
nfw	v0,a,c  	v=v0*sqrt((ln(1+cx)-cx/(1+cx))/x/(ln(1+c)-c/(1+c)))	needs a fixed 'c' 	
power	v0,a,p  	v=v0*x^p                         	a needs to be fixed (scale free)!
.fi
.SH EXAMPLE
First an example of creating a synthetic velocity field with
\fIccdvel(1NEMO)\fP, and analysing it with 
rotcurshape, by using a simple rotation curve 
entered by a sneaky construction in shell variables \fB$r\fP and 
\fB$v\fP. The shape function is a \fBcore1\fP with amplitude 200 and
core radius 20:
.nf
    % set r=`nemoinp 0:60`
    % set v=`nemoinp 0:60 | tabmath - - "100*%1/(20+%1)" all`
    % ccdvel out=map1.vel rad="$r" vrot="$v" pa=30 inc=60
    % rotcurshape in=map1.vel radii=0,60 pa=30 inc=60 vsys=0 units=arcsec,1 \\
         rotcur1=core1,100,20,1,1 tab=-
....

VSYS: 2.36846e-18 0.00110072
XPOS: 63.5 0.000759475
YPOS: 63.5 0.00100543
PA:   30 0.0010416
INC:  60.0001 0.00229122
P1:  100.392 0.00757645
P2:  20.2883 0.0045192
NPT:  5658

		(this is also the Testfile version)
.fi
The reason why the error bars are not exactly zero is because 
ccdvel interpolates from the (r,v) table, and the finite pixel
sizes.
.PP
Here is an example to write your own C code with a rotation curve, and load it
in during runtime: (examples are in $NEMO/src/image/rotcur/shape):
.nf
    % cat mylinear.c

    #include <nemo.h>
    real rotcur_linear(real r, int n, real *p, real *d)
    {	
	d[0] = r;
	return p[0] * r;
    }
    % bake mylinear.so
    % rotcurshape in=map1.vel radii=0,10 load=mylinear.so rotcur1=linear,10,1
.fi
.PP
Here is a contrived example of creating a velocity model field with rotcurshape by
supplying a zero map, fixing all parameters, and computing the residual
velocity field (OBS-FIT). Of course you will get -1 times the velocity field,
but still. It is an alternative to \fIccdvel(1NEMO)\fP
.nf
    % ccdmath out=map0.vel fie=0 size=128,128
    % rotcurshape map0.vel 0,40 30 45 0 blank=-999 resid=map.vel \\
	rotcur1=plummer,200,10,0,0 fixed=all units=arcsec,1 
.fi
.PP
When \fBnsigma>0\fP is used to find an improved solution, the residual map now
contains 2 maps, and it is the 2nd map which contains the supposed improved
map. Here is an example how to extract and display
that 2nd map using \fIcsf(1NEMO)\fP
.nf
    % rotcurshape map0.vel 0,40 30 45 0 blank=-999 resid=map.vel \\
	rotcur1=plummer,200,10,0,0 fixed=all units=arcsec,1 nsigma=2
    % csf map.vel map2.vel item=Image select=2
    % nds9 map2.vel
.fi
.SH FILES
.nf
.ta +2i
func_rotcur.c	helper routine for tabnllsqfit to use rotcur functions
$NEMO/src/image/rotcur/shape/	directory with other example shape functions
.fi
.nf
.SH CAVEAT
Parameters and fix/free masks to rotation curve parameters should be all set, in order
for the respective routines to figure out the correct number of parameters. For example,
the \fIpoly\fP rotation curve can only determine the correct order of the polynomial
by counting the number of arguments given in that option, e.g.
\fBrotcur1=poly,100,10,2,2,1,1,1,1\fP  would use a 3th order polynomial.
.PP
rotcurshape does surprisingly bad on \fBexact\fP data, and often complains about taking
the sqrt of a negative number.  Adding a little noise will speed up convergence!
.PP
rotcurshape sometimes needs inititial conditions  pathetically close to a minimum
to converge, and more than often complains with the message
.nf
### Warning [rotcurshape]: nllsqfit=-4: must find better solution (n=225)
### Warning [rotcurshape]: ROTCUR: problems with matrix inversion
.fi
.PP
if \fBbeam=\fP is used, the map is also used to estimate beam smearing corrections. 
This is still a totally untested  feature of the code.
.SH SEE ALSO
rotcurtab(1NEMO), rotcur(1NEMO), ccdvel(1NEMO), tabcomment(1NEMO), rotcurves(1NEMO), pvtrace(1NEMO), ccdmom(1NEMO), tabnllsqfit(1NEMO), rotcurshape(5NEMO), loadobj(3NEMO), gal(AIPS), nllsqfit(3NEMO)
.SH AUTHOR
Peter Teuben
.SH UPDATE HISTORY
.nf
.ta +1i +4i
20-jul-02	0.9 cloned off rotcur		PJT
10-sep-02	1.0 implemented an image version for resid=	PJT
19-sep-02	1.0d added exp (vMoorsel&Wells 1985), and nfw	PJT
13-dec-02 	1.0h added (corrected) power law rotcur	PJT
11-oct-03	fixed up for adass 2003  	PJT
26-may-04	1.2e fixed sqrt(n) bug in sigma, improved nsigma>0 iterations	PJT
13-jun-04	1.3: added fit= option to save a fitted map	PJT
30-jan-08	1.4: with new rotcurtab minor overhaul of code	PJT
.fi
