.TH SNAPIDL 1NEMO "6 August 2009"
.SH NAME
snapidl \- tabulate a snapshot for IDL in binary mode
.SH SYNOPSIS
\fBsnapidl\fB [parameter=value]
.SH DESCRIPTION
\fBsnapidl\fP outputs selected particle variables in binary
format (e.g. for IDL or fortran unformatted read's)
The output format is a local host
binary  format(see \fIsnapprint(1NEMO)\fP for an ascii table
version), and should only be used on that local host to
prevent endianism and floating point format
conversion problems. See examples below on how to read the binary
data into IDL and fortran.
.PP
Note that this program write all variables as float (single precision),
including integers.
.PP
For an alternative approach, use \fIsnappat(1NEMO)\fP to create
a Particle-Attribute-Time datacube, convert this to FITS using
\fIccdfits(1NEMO)\fP and read this into IDL. For simulations with a
large number of snapshots this can be significantly faster.
.SH PARAMETERS
The following parameters are recognized in any order if the keyword
is also given:
.TP 20
\fBin=\fP\fIfile\fP
Input file (snapshot). No default.
.TP
\fBoptions=\fP
Things to output [x,y,z,vx,vy,vz]    
.TP
\fBtimes=\fP\fIt1,t2,...\fP
Times to select snapshot [all]   
.TP
\fBout=\fP\fIfile\fP
Output file - normally a pipe for IDL.
[Default: -]
.TP
\fBfortran=t|f\fP
Attempt to format the binary data suitable for
a series of FORTRAN unformatted READ's. 
[Default: \fBf\fP]
.TP
\fBheader=0|4|8|\fP
Header size in bytes that unformatted files use. Default: 4
.SH FORMAT
The output format is binary encoded, and only meant to
be transported to other machines (e.g. is uses the
local host format).
.nf
Nb,T1,Nv,v1,v2,v3,....v_Nv,Nb,T2,Nv,v1,v2,v3,....v_Nv,....
.fi
where \fINb\fP is the number of bodies and \fINv\fP the number of vectors
of length \fINb\fP each.

.SH EXAMPLES
Here is an example to dump all positions of the particles at time 1.0
to a pipe, which is then read by IDL into arrays \fIx,y,z\fP.
.nf

mkplummer snap000 100
idl
IDL> SPAWN, ['snapidl','snap000','x,y,z'], UNIT=LUN, /NOSHELL
IDL> nbody=0L
IDL> nvec=0L 
IDL> READU,LUN,nbody,nvec,tsnap
IDL> PRINT,"Found a snapshot with ",nbody," particles at time", tsnap
IDL> x=FLTARR(nbody)
IDL> y=FLTARR(nbody)
IDL> z=FLTARR(nbody)
IDL> READU,LUN,x,y,z
IDL> FREE_LUN, LUN
.fi

And here is an example writing the data in a format that can be read with
a fortran program:
.nf

mkplummer snap111 100 
snapidl snap111 x,y,z out=snap111.dat fortran=t
idl
IDL> OPENR,LUN,'snap111.dat',/F77_UNFORMATTED,/GET_LUN
IDL> nbody=0L
IDL> nvec=0L 
IDL> READU,LUN,nbody,nvec,tsnap
IDL> PRINT,"Found a snapshot with ",nbody," particles at time", tsnap
IDL> x=FLTARR(nbody)
IDL> y=FLTARR(nbody)
IDL> z=FLTARR(nbody)
IDL> READU,LUN,x
IDL> READU,LUN,y
IDL> READU,LUN,z
IDL> FREE_LUN, LUN

.fi
In fortran, without any error control and array overflow checking,
\fIsnap111.dat\fP can also be read as follows:
.nf

	program snapread
	real x(1000),y(1000),z(1000),tsnap
	integer nbody,nvec,i
	open(1,file='snap111.dat',form='unformatted')
	read(1) nbody,nvec,tsnap
	read(1) (x(i),i=1,nbody)
	read(1) (y(i),i=1,nbody)
	read(1) (z(i),i=1,nbody)
	end

.fi
.SH CAVEAT
Some versions of IDL (e.g. 6.3) do not properly read/write 8 byte headers
where needed on 64 bit systems. See also \fIunfio(1NEMO)\fP for a description.
.PP
Careful cutting and pasting examples from man pages, hidden characters can 
slip unseen into your session.
.SH SEE ALSO
snapprint(1NEMO), snappat(1NEMO), unfio(1NEMO), snapshot(5NEMO), 
.SH FILES
src/nbody/io	- snapidl.c
.SH AUTHOR
Peter Teuben
.SH UPDATE HISTORY
.nf
.ta +1.0i +4.0i
26-Nov-02	V1.0 Created	PJT
5-aug-09	it seems IDL now needs /GET_LUN in the 2nd example
6-aug-09	V1.2 added header=	PJT
.fi
