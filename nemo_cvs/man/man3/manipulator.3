.TH MANIPULATOR 3falcON "7 November 2005"
.SH NAME
manipulator \- plugins for N-body simulators performing work on a snapshot
.SH SYNOPSIS
.nf
.B #include <public/manip.h>
.B #include <public/defman.h>
.PP

namespace {
  using namespace falcON;

    class foobar : public manipulator {
      public:
      const char* name() const;
      const char* describe const;

      fieldset need() const;
      fieldset change() const;
      fieldset provide() const;
   
      bool manipulate(const snapshot*) const;
      foobar(const double *pars, int npar, const char *file);
      !foobar();
   };

}

__DEF__MAN(foobar)

.fi
The \fIfoobar\fP class gets compiled into a shared object \fIfoobar.so\fP,
and is required to have a specific type of constructor and a number of 
member functions. The __DEF__MAN macro will then create an extern "C" 
function, called \fIinimanip\fP, which can be loaded by the dynamic 
object loaded (see also \fIloadobj(3NEMO)\fP). It will instantiate
a \fBfoobar\fP object, and made available to the code.
.PP

On the "server" side, i.e. the code that needs to initialize and
distribute the work, the \fBManipulator\fP class constrols this.

.nf

 class Manipulator;
.fi

.SH DESCRIPTION
\fImanipulator\fPs are plugins that can be used to perform action(s) on a
snapshots that are not known at compile time, but can be dynamically
choosen by the user at run-time. Similar to
\fIpotential(5NEMO)\fP and  \fIacceleration(5NEMO)\fP, they are code
(in this case a C++ class, see the example above)
that has been pre-compiled and can be loaded at run-time, based on
a descriptive name and an optional set of parameters and files.
.PP
From a user's perspective a name must be given to find the manipulator
(typically the class name), as well as an optional set of parameters
and files for that manipulator. As usual these will present them to the
user as a set of keywords:
.nf
.ta +2i

manipname=	name of the manipulator (multiple can be given, see below)
manippars=	a set of parameters this manipulator will understand (optional)
manipfile=	a set of character strings, ususally one or more files (optional)
manippath=	search path (or use $MANIPPATH if left blank???)

manipinit=	? manipulate initial snapshot ? [specific to gyrfalcON]

.fi
Multiple manipulator can be given, and are processed in the order given
on the \fB manipname= \fP keyword. Here is an example:
.nf

.B manipname=name1+name2+name3
.B manippars=";1,2,3;"
.B manipfile="file1;;file3a,file3b"

.fi
where the first manipulator has no parameters, and one file, the 2nd
manipulator has 3 parameters given, and no file, and the third has no
parameters and 2 files.  Instead of the \fB;\fP symbol to separate
parameters or files, a single space (not a tab) can also be used. For
manipulator names the \fB,\fP symbol can also be used to separate
their names.

.SH EXAMPLES
Examples can be found within the \fIgyrfalcON(1NEMO)\fP source tree. Here is an
example, actually taken from the glnemo source tree,
of the integrator able to send snapshot data, as they are produced,
into the \fIglnemo(1NEMO)\fP display server via a manipulator:
.nf

  host1% mkexpdisk disk1 50000
  host1% gyrfalcon in=disk1 out=disk1.out step=100 manipname=glnemo

  host2% glnemo server=host1

.fi
This particular manipulator is only using \fBmanippars\fP as an optional
keyword, and is interpreted as a single integer denoting the port number
on which glnemo is talking (\fBport=444\fP in glnemo)

.SH "ENVIRONMENT"
The environment variable \fBMANIPPATH\fP can be used to search for accelerations
in other than the local directory. This feature is however not implemented
everywhere, hence the \fBmanippath=\fP keyword.
.SH "SEE ALSO"
acceleration(5NEMO), potential(5NEMO), gyrfalcON(1NEMO), loadobj(5NEMO)
.PP
http://www.tntnet.org/cxxtools.bhtm for another c++ wrapper example to loadobj
.SH "AUTHOR"
Walter Dehnen
.SH "FILES"
.nf
.ta +2.5i
NEMO/usr/dehnen/falcON			tree code that accepts manipulators, plus some examples
NEMO/src/nbody/glnemo/manipulators	example glnemo manipulator
NEMO/usr/dehnen/falcON/manip		repository of manipulator files
NEMO/obj/manip				repository of manipulator files
.fi
.SH "UPDATE HISTORY"
.nf
.ta +1.0i +4.0i
7-nov-05	initial man page written	PJT
12-jul-06	'#' no longer allowed as separator, but space is	WD
.fi

