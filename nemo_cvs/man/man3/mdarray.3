.TH MDARRAY 3NEMO "19 February 2006"
.SH NAME
mdarray - simple multi-dimensional (C style) array allocators with sequential memory 
.SH SYNOPSIS
.nf
.B
#include <mdarray.h>
.PP
.B #define MDMAXDIM    7 
.PP
.B typedef real     *mdarray1;   /* vector */
.B typedef mdarray1 *mdarray2;   /* matrix */
.B typedef mdarray2 *mdarray3;   /* tensor */
.B typedef mdarray3 *mdarray4;   /* hyper tensor */
.B ...
.PP
.B mdarray1 allocate_mdarray1(n1)
.B mdarray2 allocate_mdarray2(n2,n1)
.B mdarray3 allocate_mdarray3(n3,n2,n1)
.B mdarray4 allocate_mdarray4(n4,n3,n2,n1)
.B ...
.B void free_mdarray1(mdarray1 x, int n1);
.B void free_mdarray2(mdarray2 x, int n2, int n1);
.B void free_mdarray3(mdarray3 x, int n3, int n2, int n1);
.B void free_mdarray4(mdarray4 x, int n4, int n3, int n2, int n1);
.B ...
.fi
.SH DESCRIPTION
\fImdarray\fP offers a uniform way to allocate and free multi-dimensional
(real) C-style arrays. Up to MDMAXDIM (defined via the header file) 
dimensions are available. Actually data memory is guarenteed to be
sequentually in memory, as they are with static multidimensional arrays.
.PP
Arrays are stored in row major order, rows vary most rapidly in memory. For
example in
.nf
   double matrix a[20][10];
.fi
the right-most index (10) varies most rapidly in memory, exactly like static C arrays.
.PP
Example of use: ( b = A.x)
.nf
    mdarray1 x = allocate_mdarray1(10);      /*  x[10]     */
    mdarray2 A = allocate_mdarray2(20,10);   /*  A[20][10] */
    mdarray1 b = allocate_mdarray1(20);      /*  b[20]     */
    int i,j;

    for (j=0; j<20; j++) {
        b[j] = 0.0;
        for (i=0; i<10; i++)
            b[j] += A[j][i]*x[i]
    }
    
.fi
.SH TIMING
The TESTBED function (\fBmdarraytest\fP) excersizes a simple initialization of 
all array elements, and
summing them up. This also clearly shows how reversing the order of array access 
affects the CPU speed , viz. timings on a P4/1600 laptop:
.nf
    % time mdarraytest 4,4,4 iter=1000000  flip=f
    Working with ndim=3 MD_Array[[4][4][4]
    2.110u 0.010s 0:02.31 91.7%     0+0k 0+0io 135pf+0w

    % time mdarraytest 4,4,4 iter=1000000  flip=t
    Working with ndim=3 MD_Array[[4][4][4]
    2.050u 0.000s 0:02.14 95.7%     0+0k 0+0io 135pf+0w

    % time mdarraytest 100,100,100 iter=100 flip=f
    Working with ndim=3 MD_Array[[100][100][100]
    3.210u 0.020s 0:03.35 96.4%     0+0k 0+0io 135pf+0w

    % time mdarraytest 100,100,100 iter=100 flip=t
    Working with ndim=3 MD_Array[[100][100][100]
    30.530u 0.040s 0:31.85 95.9%    0+0k 0+0io 135pf+0w
.fi
On grus (P3/930) 5.0 vs. 19.9 sec.  On chand (P4/2500)  1.1 vs. 12.3 sec CPU. 
.SH CAVEAT
Although both static and dynamic multi-dimensional arrays 
.nf
    real     s3[4][5][6];
    mdarray3 d3 = allocate_mdarray3(4,5,6);
.fi
use sequential memory, the dynamic array uses extra memory to use the 
\fIarrays of arrays\fP, and therefore the addresses
.nf
    d3 !=  d3[0] != d3[0][0]
.fi
are not the same, whereas for static arrays they are
.nf
    s3 ==  s3[0] == s3[0][0]
.fi
For example, for a double precision \fIa[n3][n2]n1]\fP mdarray3, instead of using 
2*n1*n2*n3 words, it will use \fI((2*n1+1)*n2+1)*n3\fP words.
.PP
To quote the FFTW manual: \fPusing it will cause FFTW to die a painful death\fP
(referring to such dynamic arrays)
.SH SEE ALSO
.nf
vectmath(3NEMO)
nrutil.c (Numerical Recipes) for an alternative approach
GSL: http://www.gnu.org/software/gsl/manual/html_node/Matrices.html (cf. \fIvalarray\fP in C++)
http://www.fredosaurus.com/notes-cpp/arrayptr/23two-dim-array-memory-layout.html
http://www.fftw.org/
http://c-faq.com/aryptr/
.fi
.SH AUTHOR
Peter Teuben
.SH FILES
.nf
.ta +2.5i
~/src/kernel/misc	mdarray.c
.fi
.SH UPDATE HISTORY
.nf
.ta +1i +4i
5-may-03	Created   	PJT
19-feb-06	Allocate actually memory sequentually	PJT
.fi
