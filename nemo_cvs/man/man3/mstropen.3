.TH MSTROPEN 3NEMO "14 September 2002"
.SH NAME
mstr_init, mstr_open, mstr_close, mstr_count, mstr_multi \- multiple template based file-stream utilities
.SH SYNOPSIS
.nf
.B #include <stdinc.h>
.PP
.B mstr *mstr_init(string template)
.B stream mstr_open(mstr *mp, string mode)
.B void mstr_close(mstr *mp)
.B int mstr_count(mstr *mp)
.B int mstr_multi(mstr *mp)
.SH DESCRIPTION
\fImstr_init()\fP returns a structure that is used
to aid in writing to a set of related files
whose name is derived from a template and embedded integer counter.
The argument is a string which can optionally contain a template
in the form of a 
\fIprintf(3)\fP style string in which an integer is used to derive
a variable name, e.g. \fBrun%03d.dat\fP. This call will also open the
first (or only, if no template is used) 
file for writing. \fImstr_open\fP will however have 
to be used to get a \fIstream\fP in order to write actual data
(see example below).
.PP
\fImstr_open()\fP returns the \fIstream\fP (see \fIstropen(3NEMO)\fP)
to the next file.  It also closes the previously opened stream, if
there was such one.
.PP
\fImstr_close()\fP closes access to an \fBmstr\fP and free's all
allocated memory associated with it.
.PP
\fImstr_count()\fP returns the number of previous calls to mstr_open.
.PP
\fImstr_multi()\fP returns if multiple files will be used in mstr_open
(currently set by checking for the existence of the \fB%\fP character
in the filename.
.SH EXAMPLE
.nf
	mstr *mp = mstr_init("test%03d.dat");
	for (int i=0; i<10; i++) {
	   stream ostr = mstr_open(mp,"w");
	   fprintf(ostr,"Hello world, i=%d\\n",i);
	}
	mstr_close(mp);
.fi
.SH TODO
Add reading them back in again
.SH SEE ALSO
stropen(3NEMO)
.SH AUTHOR
Peter Teuben
.SH FILES
.nf
.ta +1.5i
~/src/kernel/io  	mstropen.c
.fi
.SH UPDATE HISTORY
.nf
.ta +1i +4i
8-may-2002	created, on Amtrak	Peter
14-sep-2002	added mstr_count,mode	Peter
.fi
