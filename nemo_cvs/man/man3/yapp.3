.TH YAPP 3NEMO "8 February 1995"
.SH NAME
yapp \- yet another plotting package
.SH SYNOPSIS
.nf
.ta +5i
.PP
.B plinit(pltdev, xmin, xmax, ymin, ymax)	\fIstandard\fP
.B string pltdev;
.B real xmin, xmax, ymin, ymax;
.PP
.B plltype(lwid, lpat)	\fIstandard\fP
.B int lwid, lpat;
.PP
.B plline(x, y)	\fIstandard\fP
.B real x, y;
.PP
.B plmove(x, y)	\fIstandard\fP
.B real x, y;
.PP
.B plpoint(x, y)	\fIstandard\fP
.B real x, y;
.PP
.B plcircle(x, y, r)	\fIoptional\fP
.B real x, y, r;
.PP
.B plcross(x, y, s)	\fIoptional\fP
.B real x, y, s;
.PP
.B plbox(x, y, s)	\fIoptional\fP
.B real x, y, s;
.PP
.B pltext(msg, x, y, hgt, ang)	\fIstandard\fP
.B string msg;
.B real x, y, hgt, ang;
.PP
.B pljust(just)	\fIstandard\fP
.B int just;
.PP
.B plframe()	\fIstandard\fP
.PP
.B plstop()	\fIstandard\fP
.PP
.B plswap()	\fIoptional\fP
.PP
.B plxscale(x,y)	\fIoptional\fP
.B plyscale(x,y)	\fIoptional\fP
.B real x,y;
.PP
.B plflush()        	 \fIoptional\fP
.PP
\fBpl_matrix(frame, nx, ny, xmin, ymin, cell, fmin, fmax, findex)\fP	\fInon-standard\fP
\fBreal *frame, xmin, ymin, cell, fmin, fmax, findex;\fP
.B int nx, ny;
.PP
.B int pl_getpoly(x, y, n)	\fInon-standard\fP
.B float x[], y[];
.B int n;
.PP
.B int pl_cursor(x, y, c)	\fInon-standard\fP
.B float *x, *y;
.B char *c;
.PP
.B int pl_screendump(fname)	\fInon-standard\fP
.B char *fname;
.PP
.B int plcolor(color)	\fIoptional\fP
.B int color;
.PP
.B int plncolors()	\fIoptional\fP
.PP
.B int plpalette(r, g, b, nc)	\fIoptional\fP
.B real r[], g[], b[];
.B int nc;
.PP 
.B int plgetraster(bitsptr, widthptr, heightptr, depthptr)	\fIoptional\fP
.B byte **bitsptr;
.B int *widthptr, *heightptr, *depthptr;
.PP 
.B int plputraster()	\fIoptional\fP
.fi
.SH DESCRIPTION
\fIyapp\fP is a set of simple interface routines to system graphics packages.
The purpose of these routines is to provide a measure of portability for
programs which generate graphics.
The \fIyapp\fP routines are general enough for most applications, yet
simple enough to implement on a wide range of systems. A minimum set
of interface routines must exist for every
yapp-interface, as denoted by the \fIstandard\fP in the right column.
Various versions exist for different devices. See \fIyapp(5NEMO)\fP.
.PP
\fIplinit\fP initializes the graphics package.
Currently, \fIpltdev\fP is ignored in most versions. Some versions use
an environment variable \fBYAPP\fP or system keyword \fByapp=\fP
through the \fIgetparam(3NEMO)\fP user package to select a 
different device.
\fIxmin\fP, \fIxmax\fP, \fIymin\fP, and \fIymax\fP specify the range of
plotting coordinates to use.
\fIplinit\fP fits a rectangle with aspect ratio
(\fIxmax\fP \(mi \fIxmin\fP) / (\fIymax\fP \(mi \fIymin\fP) into the
available plotting surface.
.PP
\fIplltype\fP sets the line width and dot-dash pattern.
\fIlwid\fP is the line width, ranging upwards from \fB1\fP (thin).
\fIlpat\fP is the line pattern; currently \fB1\fP specifies a solid line.
If either angument is \fB0\fP or less, the corresponding line parameter
is unchanged.
.PP
\fIplline\fP, \fIplmove\fP, and \fIplpoint\fP are basic graphics operations.
Arguments \fIx\fP and \fIy\fP are scaled to the range specified
by the call to \fIplinit\fP.
\fIplline\fP draws a line from the current plotting position to
\fIx\fP, \fIy\fP, which becomes the current position.
\fIplmove\fP simply moves the current position to \fIx\fP, \fIy\fP.
\fIplpoint\fP draws a point at \fIx\fP, \fIy\fP.
.PP
\fIplcircle\fP, \fIplcross\fP and \fIplbox\fP are basic symbol plotters.
The first two arguments \fIx\fP and \fIy\fP are the center of the symbol.
\fIplcircle\fP plots a circle with radius \fIr\fP. \fIplcross\fP and
\fIplbox\fP plot a simple cross resp. box of size \fIs\fP. When s<0
the orientation of the symbols are at 45 degrees.
.PP
\fIpltext\fP plots a string of characters \fImsg\fP at position
\fIx\fP, \fIy\fP (modified by \fIpljust\fP), with character height
\fIhgt\fP, measured in user coordinates, and angle
\fIang\fP, measured counterclockwise in degrees.
.PP
\fIpljust\fP specifies the justification of text relative to
\fIx\fP, \fIy\fP; values of \fIjust\fP of \fB-1\fP, \fB0\fP, and \fB1\fP
imply left, middle and right justification respectively.
By default, left justification is used.
.PP
\fIplframe\fP erases the current display and begins a new frame. An
optional delay has sometimes been installed, or mouse interrogation
to advance to next frame.
.PP
\fIplstop\fP closes the graphics package. Depending on implemented yapp
version, this may be a 60 seconds delay, a request to press the RETURN
key or a mouse button.
.PP
\fIpl_matrix\fP is non-standard, and only works with an old 
Postscript version. Needs proper device independant solution.
Don't use it for now.
.PP
\fIpl_getpoly\fP requires a yapp implementation with a mouse. It
allows the user to define a polygon, whose vertex coordinates 
are stored in an array \fIx[n]\fP,\fIy[n]\fP with minimum 
declared length \fIn\fP. \fIpl_getpoly\fP returns the actual
stored number of vertices, which will be 3 or greater. Returns
0 if badly (zero) defined polygon has been entered. 
\fIpl_getpoly\fP does not store the first entered point again at
the end. It assumes polygon is closed.
.PP
\fIpl_cursor\fP requires a yapp implementation with a mouse. It
allows the user retrieve a cursor position, as well as the character
that was pressed.
.PP
\fIpl_screendump\fP is a standard way to create some kind of memory
image of the current display. Certain systems have fast ways to display
such memory images and create a movie feature.
On SUN's there are two versions of movie: movie(1NEMO) runs on full
screens, and moview(1NEMO)  displays small images within the suntools
environment.
.PP
\fIplcolor\fP specifies plotting color as an integer between 0 and
\fIncolors-1\fP; values outside this range are mapped to the
nearest endpoint. The number of colors, \fIncolors\fP is a number
defined by the package, and can be obtained by calling \fIplncolors\fP.
.PP
\fIplpalette\fP re-initializes the color table with user supplied values
in the arrays \fIr[], g[]\fP and \fPb[]\fP, with \fInc\fP entries 
each for the red, green and blue color respectively.
.PP
\fIplgetraster\fP is supplied for interfaces which support saving 
the image on the screen in the form of a raster image, much as
\fIpl_screendump()\fP. With \fIplputraster\fP an image,
previously saved with \fIplgetraster\fP can be (re)displayed.
.PP
The name \fIyapp\fP has nothing to do with yuppies;
as far as I know, I chose this name before such lice were more
than a gleam in the eye of Dr. Dan Asher.
.SH BUGS
Line weight does not appear to affect point sizes.
Better handling of out-of-bounds points and lines is required.
.PP
\fIyapp\fP shares some routine names with the Texax \fIplplot\fP
subroutine library. Our version of yapp_plplot hence uses the c_
routine names.
.PP
No good method for properly selecting foreground and background color.
.SH AUTHOR
Joshua E. Barnes
.SH SEE ALSO
yapp(5NEMO)
.SH UPDATE HISTORY
.nf
.ta +1i +4i
xx-jun-87	documentation written                   	JEB
16-aug-88	improved documentation                    	PJT
10-dec-88	added pl_screendump                     	PJT
19-jul-89	added doc for yapp_cg_new                	PJT
26-oct-90	added doc                                 	PJT
8-feb-95	double is now real                       	pjt
21-jan-00	pl_cursor                               	pjt
.fi
