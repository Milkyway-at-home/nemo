.\" Automatically generated by Pod::Man version 1.15
.\" Sat Jul 13 16:57:49 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "SHTOOL 1"
.TH SHTOOL 1 "12-Jul-2002" "shtool 1.6.1" "GNU Portable Shell Tool"
.UC
.SH "NAME"
\&\fB\s-1GNU\s0 shtool\fR \- The \s-1GNU\s0 Portable Shell Tool
.SH "VERSION"
.IX Header "VERSION"
\&\s-1GNU\s0 shtool \s-11.6.1 (12-Jul-2002)\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBshtool\fR
[ \fIglobal_options\fR ]
\&\fIcommand\fR
[ \fIcommand_options\fR ]
[ \fIcommand_args\fR ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1GNU\s0 shtool\fR is a compilation of small but very stable and portable shell
scripts into a single shell tool. All ingredients were in successful use over
many years in various free software projects. The compiled \fBshtool\fR script is
intended to be used inside the source tree of those free software packages.
There it can take over various (usually non-portable) tasks related to the
building and installation of such packages.
.Sh "Context Background"
.IX Subsection "Context Background"
For the configuration, build and installation environment of modern free
software packages one nowadays uses \s-1GNU\s0 \fBautoconf\fR and friends (i.e.
usually \fBautoconf\fR, \fBautomake\fR and \fBlibtool\fR). \fBAutoconf\fR covers the
configuration, \fBautomake\fR covers the generation of the build environment and
\&\fBlibtool\fR covers most of a libraries build process. But at least when it
comes to the installation step one usually have to use a few auxiliary scripts
like \f(CW\*(C`mkdir.sh\*(C'\fR, \f(CW\*(C`install.sh\*(C'\fR, etc. These scripts are usually replacements
for system tools and are required mainly for portability reasons. The result
is usually an \f(CW\*(C`etc/\*(C'\fR subdirectory in the source tree where over time a
lot shell scripts accumulate.
.Sh "Maintainance Problem"
.IX Subsection "Maintainance Problem"
The problem with those \f(CW\*(C`etc/\*(C'\fR shell scripts starts if one has to maintain
\&\fIlots\fR of free software packages as it's the case for the author of \fBshtool\fR.
Then over time all \f(CW\*(C`etc/\*(C'\fR directories diverge and with every day it gets more
and more nasty to always keep them in sync. Especially if some scripts
were locally adjusted because no centralized maintainance location exists, of
course. For \fBautoconf\fR no such problem exists, because the resulting
\&\f(CW\*(C`configure\*(C'\fR script is generated on-the-fly. The same applies to \fBautomake\fR
and the various \f(CW\*(C`Makefile.in\*(C'\fR files.
.PP
Only for \fBlibtool\fR one always has to grab the latest copy. But because it's
just two files (\f(CW\*(C`ltmain.sh\*(C'\fR and \f(CW\*(C`ltconfig\*(C'\fR), keeping a source trees in sync
is not too complicated (especially not if using the handy \f(CW\*(C`libtoolize\*(C'\fR
program). But the \f(CW\*(C`etc/\*(C'\fR shell script mess is nasty, especially because there
is no master version on the net. Additionally everytime one starts a new
project, one has to establish a new source tree. For a \s-1GNU\s0 hacker it's
immediately clear that \fBautoconf\fR and friends are part of the game. But which
\&\f(CW\*(C`etc/\*(C'\fR shell scripts are needed this time? And from which existing source
tree to copy them from? Hmmm... the same procedure as last year?!
.Sh "The Aesthetic Problem"
.IX Subsection "The Aesthetic Problem"
When a free software package has a large source tree (say, more than 50 files
and especially with one or more subdirectories) it's usually no problem to
have an additional \f(CW\*(C`etc/\*(C'\fR subdirectory with some scripts. They then totally
go down. But for smaller packages, especially those living in a single source
directory (a degenerated tree), some people (like the author of \fBshtool\fR)
have aesthetic problems. Because it looks strange to them that 20% of the
files in the source tree are just auxiliary scripts. Sure, the actual amount
of script code even \fBshtool\fR cannot reduce, but \fBshtool\fR merges them
together into a single file and this way they optically totally disappear from
the source tree.
.PP
This is a pure aesthetical issue, of course. But keep in mind that hacking is
a piece of art. And a well layouted source tree is a piece of art for real
hackers, too.  Oh, and for those who really insist on a technical reason: it's
also easier to upgrade a single file than multiple files ;)
.Sh "Filling the gap"
.IX Subsection "Filling the gap"
So, wouldn't it be nice to have a fourth package (beside \fBautoconf\fR,
\&\fBautomake\fR and \fBlibtool\fR) which fills the gap, i.e. which provides the
functionality of the old files in \f(CW\*(C`etc/\*(C'\fR, is maintained at a centralized
location and even consists of just a single (perhaps large) script one can
threat as a black box the same way one already does this for \fBlibtool\fR?  The
author thought this \fIwould\fR be actually very useful and the result is the
current \s-1GNU\s0 \fBshtool\fR package which at least successfully solved the above
problems of the author.
.Sh "The goals in detail"
.IX Subsection "The goals in detail"
To better understand the intentions behind \fBshtool\fR and to avoid confusion,
here are the original goals of the \fBshtool\fR script:
.Ip "\fB1. It has to be self-contained and reside in a single file\fR" 3
.IX Item "1. It has to be self-contained and reside in a single file"
This was achieved by compiling the resulting \fBshtool\fR script out of the
ingredient source scripts. The advantage is that \fBshtool\fR is still easily
maintainable, because one can test each script separately. But the final
functionality then resides in an all-in-one script which can be easily spread
over multiple source trees.
.Ip "\fB2. It has to cover all functionality of the old scripts\fR" 3
.IX Item "2. It has to cover all functionality of the old scripts"
This was achieved by (re)implementing really all functionality which
experience showed is important in source trees of typical free software
packages.
.Ip "\fB3. It has to be maximum portable over all Unix flavors\fR" 3
.IX Item "3. It has to be maximum portable over all Unix flavors"
This was achieved by basing the ingredient shell scripts only on well-proven
code which already survived practice in other projects over more than a few
months. Especially this means that a lot of complicated emulations are done to
avoid the use of unportable Unix programs (like \f(CW\*(C`fmt\*(C'\fR, \f(CW\*(C`tr\*(C'\fR, etc) or
unportable features of well-known Unix programs (like shell functions, special
\&\f(CW\*(C`sed\*(C'\fR features, etc. pp).  That's why \fBshtool\fR's code sometimes looks crazy
and like overkill to you. Don't think this is because of the authors
crazyness. Instead it's most of the time mainly for portability reasons.
.Ip "\fB4. It has to be clean and fully documented\fR" 3
.IX Item "4. It has to be clean and fully documented"
This was achieved by reimplementing too ugly functionality from scratch and
cleaning up old shell script code plus writing this complete manual page.
.Ip "\fB5. It has to stay under a reasonable and common license\fR" 3
.IX Item "5. It has to stay under a reasonable and common license"
This was achieved by placing the \fBshtool\fR package under the \s-1GNU\s0 General
Public License (\s-1GPL\s0).  This way the \fBshtool\fR package itself is well protected
and is guarrantied to be kept free software, but the resulting \fBshtool\fR
script can be nevertheless \fIused\fR in \fIall\fR types of source trees.  Notice
here: given that one includes \s-1GNU\s0 \fBshtool\fR verbatim into an own source tree,
one is justified in saying that it remains separate from the own package, and
that this way one is simply just \fIusing\fR \fBshtool\fR.  So, in this situation,
there is no requirement that the package itself is licensed under the \s-1GNU\s0
General Public License in order to take advantage of \fBshtool\fR. Keep this in
mind ;)
.Ip "\fB6. It has to be modularized for flexibility reasons\fR" 3
.IX Item "6. It has to be modularized for flexibility reasons"
This was achieved by using an auxiliary tool \fIshtoolize\fR\|(1) which can be used to
build individual \f(CW\*(C`shtool\*(C'\fR scripts out of the ingredient shell scripts. This
way if one don't need all the available functionality one can assemble
together an individual \f(CW\*(C`shtool\*(C'\fR script.
.SH "GLOBAL OPTIONS"
.IX Header "GLOBAL OPTIONS"
The following \fIglobal options\fR are available for \fBshtool\fR. Any \fIcommand\fRs
are ignored if one of them is present on the \fBshtool\fR command line.
.Ip "\fB\-h\fR, \fB\*(--help\fR" 4
.IX Item "-h, help"
Displays a short help page describing the usage of \fBshtool\fR and it's
ingredient \fIcommand\fRs in a compact way.
.Ip "\fB\-v\fR, \fB\*(--version\fR" 4
.IX Item "-v, version"
Displays the version number of \fBshtool\fR.
.Ip "\fB\-d\fR, \fB\*(--debug\fR" 4
.IX Item "-d, debug"
Displays shell trace messages for debugging purposes.
.Ip "\fB\-r\fR, \fB\*(--recreate\fR" 4
.IX Item "-r, recreate"
Recreate the \fBshtool\fR script with its own individual \fIshtoolize\fR\|(1) call.
.SH "COMMANDS"
.IX Header "COMMANDS"
The following \fIcommand\fRs are provided by \fBshtool\fR. They are all called via
``\f(CW\*(C`shtool\*(C'\fR \fIcommand\fR''. Any trailing \fIcommand_options\fR are specific to the
particular \fIcommand\fR. They are listed (here and also below) sorted by topic,
i.e. related commands are listed side-by-side.
.Ip "\fBecho\fR" 12
.IX Item "echo"
\&\fIecho\fR\|(1) style print command providing special expansion constructs (terminal
bold mode, environment details, date) and newline control.
.Ip "\fBmdate\fR" 12
.IX Item "mdate"
Pretty-prints the last modification time of a file or directory.
.Ip "\fBtable\fR" 12
.IX Item "table"
Pretty-prints a field-separately list as a table.
.Ip "\fBprop\fR" 12
.IX Item "prop"
Display a processing indication though a running propeller.
.Ip "\fBmove\fR" 12
.IX Item "move"
\&\fImv\fR\|(1) style command, but can rename/move multiple files at once and allows
source files just to be deleted if contents didn't change.
.Ip "\fBinstall\fR" 12
.IX Item "install"
Install a program, script or datafile in a portable way.
.Ip "\fBmkdir\fR" 12
.IX Item "mkdir"
\&\fImkdir\fR\|(1) style command providing support for auto-parent-dir creation,
directory permission control and smart skipping if directory already
exists.
.Ip "\fBmkln\fR" 12
.IX Item "mkln"
\&\fIln\fR\|(1) style command providing automatic calculation and usage of relative
links if possible.
.Ip "\fBmkshadow\fR" 12
.IX Item "mkshadow"
Create a shadow source tree by the help of symbolic links.
.Ip "\fBfixperm\fR" 12
.IX Item "fixperm"
Fix file permissions inside a source tree by cleaning up the permission bits.
.Ip "\fBrotate\fR" 12
.IX Item "rotate"
Rotate a logfile.
.Ip "\fBtarball\fR" 12
.IX Item "tarball"
Roll standardized distribution tarballs.
.Ip "\fBsubst\fR" 12
.IX Item "subst"
Apply \fIsed\fR\|(1) substitution operations.
.Ip "\fBguessos\fR" 12
.IX Item "guessos"
Simple operating system and platform architecture guesser which
determines a \s-1GNU\s0 \fIplatform-triple\fR style identification string.
.Ip "\fBarx\fR" 12
.IX Item "arx"
Extended archive command which can even put existing archives into an archive.
.Ip "\fBslo\fR" 12
.IX Item "slo"
Separate linker options by library class.
.Ip "\fBscpp\fR" 12
.IX Item "scpp"
An additional C source file pre-processor for sharing \fIcpp\fR\|(1) code, internal
variables and internal functions.
.Ip "\fBversion\fR" 12
.IX Item "version"
Maintain a version information file in either Text, C/\*(C+, Perl or Python.
format.
.Ip "\fBpath\fR" 12
.IX Item "path"
Deal with shell path variables.
.SH "COMMAND DESCRIPTION"
.IX Header "COMMAND DESCRIPTION"
In the following the available \fIcommands\fR and their corresponding
\&\fIcommand_options\fR are described in detail.
.Ip "\fBecho\fR [\fB\-n\fR|\fB\*(--newline\fR] [\fB\-e\fR|\fB\*(--expand\fR] \fIstr\fR" 4
.IX Item "echo [-n|newline] [-e|expand] str"
This is an \fIecho\fR\|(1) style print command which provides special expansion
constructs (terminal bold mode, environment details, date) and newline
control.  Per default \fIstring\fR is written to \fIstdout\fR followed by a newline
character (``\f(CW\*(C`\en\*(C'\fR''). When option ``\fB\-n\fR'' is used this newline character is
left out.
.Sp
The \fIstr\fR can contain special ``\fB%\fR\fIx\fR'' constructs which which
are expanded before the output is written if option ``\fB\-e\fR'' is
used. Currently the following constructs are recognized: ``\fB%B\fR''
for switching to terminal bold mode, ``\fB%b\fR'' for switching terminal
mode back to normal display mode, ``\fB%u\fR'' for the current user name,
``\fB%U\fR'' for the current user id (numerical), ``\fB%g\fR'' for the current
group name, ``\fB%G\fR'' for the current group id (numerical), ``\fB%h\fR''
for the current hostname, ``\fB%d\fR'' for the current domain name,
``\fB%D\fR'' for the current day of the month, ``\fB%M\fR'' for the current
month (numerical), ``\fB%m\fR'' for the current month name and ``\fB%Y\fR''
for the current year.
.Sp
The trick of this command is that it provides a portable ``\fB\-n\fR'' option and
hides the gory details needed to find out the environment details.
.Sp
Examples:
.Sp
.Vb 4
\& #   shell script
\& shtool echo -n -e "Enter your name [%B%u%b]: "; read name
\& shtool echo -e "Your Email address might be %u@%h%d"
\& shtool echo -e "The current date is %D-%m-%Y"
.Ve
.Ip "\fBmdate\fR [\fB\-n\fR|\fB\*(--newline\fR] [\fB\-z\fR|\fB\*(--zero\fR] [\fB\-s\fR|\fB\*(--shorten\fR] [\fB\-d\fR|\fB\*(--digits\fR] [\fB\-f\fR|\fB\*(--field-sep\fR \fIstr\fR] [\fB\-o\fR|\fB\*(--order\fR \fIspec\fR] \fIpath\fR" 4
.IX Item "mdate [-n|newline] [-z|zero] [-s|shorten] [-d|digits] [-f|field-sep str] [-o|order spec] path"
This command pretty-prints the last modification time of a file or directory
\&\fIpath\fR. Option ``\fB\-n\fR'' suppresses the output of a trailing newline
character, option ``\fB\-z\fR'' pads numeric day (and optionally month) with a
leading zero, option ``\fB\-s\fR'' shortens the months name to an abbreviation of
three characters, option ``\fB\-d\fR'' replaces the month name with the
corresponding digits, option ``\fB\-f\fR'' uses \fIstr\fR as the field separator
(default is a single space character) and option ``\fB\-o\fR'' specified the order
in which the fields are printed.
.Sp
The default for \fIspec\fR is ``\f(CW\*(C`dmy\*(C'\fR'' which means an output of ``<day> <month>
<year>''.  Any combination of the chars ``\f(CW\*(C`d\*(C'\fR'', ``\f(CW\*(C`m\*(C'\fR'' and ``\f(CW\*(C`y\*(C'\fR'' or
allowed for \fIspec\fR.
.Sp
The trick of this command is that it provides a portable way to find out the
date of a file or directory while still allowing one to specify the format of
the date display.
.Sp
Examples:
.Sp
.Vb 4
\& #   shell script
\& shtool mdate -n /
\& shtool mdate -f '/' -z -d -o ymd foo.txt
\& shtool mdate -f '-' -s foo.txt
.Ve
.Ip "\fBtable\fR [\fB\-F\fR|\fB\*(--field-sep\fR \fIsep\fR] [\fB\-w\fR|\fB\*(--width\fR \fIwidth\fR] [\fB\-c\fR|\fB\*(--columns\fR \fIcols\fR] [\fB\-s\fR|\fB\*(--strip\fR \fIstrip\fR] \fIstr\fR\fBsep\fR\fIstr\fR..." 4
.IX Item "table [-F|field-sep sep] [-w|width width] [-c|columns cols] [-s|strip strip] strsepstr..."
This pretty-prints a \fIsep\fR\-separated list of \fIstr\fRings as a table.  Per
default a colon-separated list (\fIsep\fR=\*(L":\*(R") is pretty printed as a
three-column (<cols>=3) table no longer than 79 chars (\fIstrip\fR=79) is
generated where each column is 15 characters wide (\fIwidth\fR=15).
.Sp
The trick of this command is that it avoids to use the unportable \fItr\fR\|(1) and
\&\fIfmt\fR\|(1) commands and instead is based entirely on \fIsh\fR\|(1), \fIawk\fR\|(1) and \fIsed\fR\|(1)
functionality.
.Sp
Example:
.Sp
.Vb 2
\& #   shell script
\& shtool table -F , -w 5 -c 4 "1,2,3,4,5,6,7,8,9,10,11,12"
.Ve
.Ip "\fBprop\fR [\fB\-p\fR|\fB\*(--prefix\fR \fIstr\fR]" 4
.IX Item "prop [-p|prefix str]"
This command displays a processing indication though a running propeller. The
option ``\fB\-p\fR'' can be used to set a particular prefix \fIstr\fR which is
displayed in front of the propeller. The default is no prefix string, i.e. the
propeller is at the left border of the terminal.  This command is intended to
be run at the end of a pipe (``\f(CW\*(C`|\*(C'\fR'') sequence where on \f(CW\*(C`stdin\*(C'\fR
logging/processing informations found.  For every line on \f(CW\*(C`stdin\*(C'\fR the
propeller cycles one step clock-wise.
.Sp
The trick of this command is that it provides a portable and easy to use way
to display such nice and psychologically important process indicators.
.Sp
Example:
.Sp
.Vb 4
\& #   shell script
\& configure 2>&1 |\e
\&     tee logfile |\e
\&     shtool prop -p "Configuring sources"
.Ve
.Ip "\fBmove\fR [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-e\fR|\fB\*(--expand\fR] [\fB\-p\fR|\fB\*(--preserve\fR] \fIsrc-file\fR \fIdst-file\fR" 4
.IX Item "move [-v|verbose] [-t|trace] [-e|expand] [-p|preserve] src-file dst-file"
This is a \fImv\fR\|(1) style command, but with two special features: First if
option ``\fB\-e\fR'' (`expand') is used and an asterisk occurs somewhere in \fIsrc\fR
one can use ``\f(CW\*(C`%\*(C'\fR\fIn\fR'' (where \fIn\fR is \f(CW\*(C`1\*(C'\fR,\f(CW\*(C`2\*(C'\fR,...) in \fIdst-file\fR. This is
useful for renaming multiple files at once.  Second, if option ``\fB\-p\fR''
(for `preserve') is used and \fIsrc-file\fR and \fIdst-file\fR are byte-wise the
same it just deletes \fIsrc-file\fR. The intention is that the permissions and
time stamps on \fIdst\fR aren't changed which is important if \fIdst-file\fR is
used in conjunction with Makefiles.  Option ``\fB\-v\fR'' (verbose) can be used to
enable the output of extra processing information. Option ``\fB\-t\fR'' (trace)
can be used to enable the output of the essential shell commands which are
executed.
.Sp
The trick of this command is that it can rename multiple files at once and
preserves the timestamps if the contents isn't changed.
.Sp
Examples:
.Sp
.Vb 2
\& #   shell script
\& shtool move -v -e '*.txt' %1.asc
.Ve
.Vb 4
\& #   Makefile
\& scanner.c: scanner.l
\&     lex scanner.l
\&     shtool move -t -p lex.yy.c scanner.c
.Ve
.Ip "\fBinstall\fR [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-c\fR|\fB\*(--copy\fR] [\fB\-C\fR|\fB\*(--compare-copy\fR] [\fB\-s\fR|\fB\*(--strip\fR] [\fB\-m\fR|\fB\*(--mode\fR \fImode\fR] [\fB\-o\fR|\fB\*(--owner\fR \fIowner\fR] [\fB\-g\fR|\fB\*(--group\fR \fIgroup\fR] [\fB\-e\fR|\fB\*(--exec\fR \fIsed-cmd\fR] \fIfile\fR \fIpath\fR" 4
.IX Item "install [-v|verbose] [-t|trace] [-c|copy] [-C|compare-copy] [-s|strip] [-m|mode mode] [-o|owner owner] [-g|group group] [-e|exec sed-cmd] file path"
This command installs a program, script or datafile (dependent on \fImode\fR) in
a portable way while providing all important options of the \s-1BSD\s0 \fIinstall\fR\|(1)
command. Per default \fIfile\fR is moved to the target \fIpath\fR, but with option
``\fB\-c\fR'' \fIfile\fR is copied. The target file is created with owner/group set
to the current active uid/gid, but if this script is called as root (uid 0)
the options ``\fB\-o\fR'' and ``\fB\-g\fR'' can be used to override this.
.Sp
Additionally program executables is stripped with \fIstrip\fR\|(1) after
installation if option ``\fB\-s\fR'' is used. Option ``\fB\-C\fR'' is like
``\fB\-c\fR'', except if the destination file already exists and the files
are the same, the source is just removed. Option ``\fB\-e\fR'' can be used
one or multiple times to apply one or more \fIsed\fR\|(1) commands on-the-fly
to the contents of the input \fIfile\fR before the output file is created.
Option ``\fB\-v\fR'' (verbose) can be used to enable the output of extra
processing information. Option ``\fB\-t\fR'' (trace) can be used to enable
the output of the essential shell commands which are executed.
.Sp
The trick of this command is that it provides the functionality of \s-1BSD\s0
\&\fIinstall\fR\|(1) in a portable emulated way.
.Sp
Example:
.Sp
.Vb 6
\& #   Makefile
\& install:
\&      :
\&     shtool install -c -s -m 4755 foo $(bindir)/
\&     shtool install -c -m 644 foo.man $(mandir)/man1/foo.1
\&     shtool install -c -m 644 -e "s/@p@/$prefix/g" foo.conf $(etcdir)/
.Ve
.Ip "\fBmkdir\fR [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-f\fR|\fB\*(--force\fR] [\fB\-p\fR|\fB\*(--parents\fR] [\fB\-m\fR|\fB\*(--mode\fR \fImode\fR] \fIdir\fR [\fIdir\fR ...]" 4
.IX Item "mkdir [-t|trace] [-f|force] [-p|parents] [-m|mode mode] dir [dir ...]"
This is a \fImkdir\fR\|(1) style command providing support for automatic parent
directory creation (if option ``\fB\-p\fR'' is used), directory permission
control (with option ``\fB\-m\fR \fImode\fR'' where \fImode\fR can be in any of
the formats specified to the \fIchmod\fR\|(1) command) and smart skipping if
\&\fIdir\fR already exists (triggered by the force option ``\fB\-f\fR''). Option
``\fB\-t\fR'' (trace) can be used to enable the output of the essential
shell commands which are executed.
.Sp
The trick of this command is that it provides both a portable ``\fB\-p\fR''
functionality and the ability to be smart if the directory already exists
which is important for installation procedures.
.Sp
Example:
.Sp
.Vb 5
\& #   Makefile
\& install:
\&     shtool mkdir -f -p -m 755 $(bindir)
\&     shtool mkdir -f -p -m 755 $(mandir)/man1
\&      :
.Ve
.Ip "\fBmkln\fR [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-f\fR|\fB\*(--force\fR] [\fB\-s\fR|\fB\*(--symbolic\fR] \fIsrc-path\fR [\fIsrc-path\fR ...] \fIdst-path\fR" 4
.IX Item "mkln [-t|trace] [-f|force] [-s|symbolic] src-path [src-path ...] dst-path"
This is a \fIln\fR\|(1) style command which provides automatic calculation and usage
of relative links if possible, i.e. usually if \fIsrc-path\fR and \fIdst-path\fR
are not absolute paths or at least they share a common prefix except the root
directory (``\f(CW\*(C`/\*(C'\fR''). When more than one \fIsrc-path\fR is specified, all of them
are linked into \fIdst-path\fR. Options ``\fB\-f\fR'' and ``\fB\-s\fR'' are similar to
\&\fIln\fR\|(1), i.e.  they force the creation of the link (even if it exists) and
create a symbolic link instead of a hard-link.  Option ``\fB\-t\fR'' (trace) can
be used to enable the output of the essential ``\f(CW\*(C`ln\*(C'\fR'' command which is
executed.
.Sp
The trick of this command is that it tried hard to calculate the paths to get
the maximum possible relative paths.
.Sp
Example:
.Sp
.Vb 2
\& #   shell script
\& shtool mkln -s foo/bar baz/quux
.Ve
.Ip "\fBmkshadow\fR [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-a\fR|\fB\*(--all\fR] \fIsrc-dir\fR \fIdst-dir\fR" 4
.IX Item "mkshadow [-v|verbose] [-t|trace] [-a|all] src-dir dst-dir"
This command creates a shadow tree of \fIsrc-dir\fR under \fIdst-dir\fR by
recreating the directory hierarchy of \fIsrc-dir\fR under \fIdst-dir\fR and by
creating the files of \fIsrc-dir\fR by linking them into the corresponding
directories under \fIdst-dir\fR via symbolic links. When \fIsrc-dir\fR can be
reached via relative paths from \fIdst-dir\fR, relative symbolic links are used,
too.
.Sp
Option ``\fB\-v\fR'' (verbose) can be used to enable some displaying of processing
information.  Option ``\fB\-t\fR'' (trace) can be used to display all commands
which are executed in order to construct \fIdst-dir\fR.  Option ``\fB\-a\fR'' (all)
can be used to really shadow all files and directories in \fIsrc-dir\fR. Per
default \s-1CVS\s0 related files and directories, backup files, object files, etc.
are not shadowed.
.Sp
The trick of this is that is provides such a high-level functionality with a
single command and hides all gory details.
.Sp
Example:
.Sp
.Vb 2
\& #   shell script
\& shtool mkshadow -v -a . /tmp/shadow
.Ve
.Ip "\fBfixperm\fR [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-t\fR|\fB\*(--trace\fR] \fIpath\fR [ \fIpath\fR ... ]" 4
.IX Item "fixperm [-v|verbose] [-t|trace] path [ path ... ]"
This command fixes file permissions inside a source tree under \fIpath\fR by
cleaning up the permission bits. It determines the cleaned up permission from
the already set bits. It's intended to be run before a tarball is rolled out
of the source tree. Option ``\fB\-v\fR'' can be used to display some processing
information.  Option ``\fB\-t\fR'' (trace) can be used to enable the output of the
essential shell commands which are executed.
.Sp
The trick is that this is more convenient that having to set the permissions
manually or with a large file list.
.Sp
Example:
.Sp
.Vb 4
\&  #   Makefile.in
\&  dist:
\&      shtool fixperm -v *
\&      ...
.Ve
.Ip "\fBrotate\fR [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-f\fR|\fB\*(--force\fR] [\fB\-n\fR|\fB\*(--num-files\fR \fIcount\fR] [\fB\-s\fR|\fB\*(--size\fR \fIsize\fR] [\fB\-c\fR|\fB\*(--copy\fR] [\fB\-r\fR|\fB\*(--remove\fR] [\fB\-a\fR|\fB\*(--archive-dir\fR \fIdir\fR] [\fB\-z\fR|\fB\*(--compress\fR [\fItool\fR:]\fIlevel\fR] [\fB\-b\fR|\fB\*(--background\fR] [\fB\-d\fR|\fB\*(--delay\fR] [\fB\-p\fR|\fB\*(--pad\fR \fIlen\fR] [\fB\-o\fR|\fB\*(--owner\fR \fIowner\fR] [\fB\-g\fR|\fB\*(--group\fR \fIgroup\fR] [\fB\-m\fR|\fB\*(--mode\fR \fImode\fR] [\fB\-M\fR|\fB\*(--migrate\fR \fIcmd\fR] [\fB\-P\fR|\fB\*(--prolog\fR \fIcmd\fR] [\fB\-E\fR|\fB\*(--epilog\fR \fIcmd\fR] \fIfile\fR [...]" 4
.IX Item "rotate [-v|verbose] [-t|trace] [-f|force] [-n|num-files count] [-s|size size] [-c|copy] [-r|remove] [-a|archive-dir dir] [-z|compress [tool:]level] [-b|background] [-d|delay] [-p|pad len] [-o|owner owner] [-g|group group] [-m|mode mode] [-M|migrate cmd] [-P|prolog cmd] [-E|epilog cmd] file [...]"
This command rotates a logfile \fIfile\fR by subsequently creating up to
\&\fIcount\fR (optionally compressed) archive files of it. Archive files are
named "\fIfile\fR.\fInumber\fR[\fIcompress-suffix]\fR" where \fInumber\fR is the
version number, 0 being the newest and "\fIcount\fR\-1" the oldest.
.Sp
A rotation step consists of the following steps: 1. remove archive file
number \fIcount\fR\-1; 2. move archive file number \fIN\fR\-1 to \fIN\fR for \fIN\fR
counting from 1 to \fIcount\fR\-1; 3. move \fIfile\fR to archive file number 0;
4. creating a new and empty instance of \fIfile\fR.
.Sp
Option ``\fB\-s\fR'' can be used to only start a rotation step if \fIfile\fR is
at least \fIsize\fR bytes long. The argument \fIsize\fR can be specified also
with the trailing units \f(CW\*(C`K\*(C'\fR (kilo), \f(CW\*(C`M\*(C'\fR (mega) or \f(CW\*(C`G\*(C'\fR (giga).
.Sp
Option ``\fB\-c\fR'' changes the approach of moving \fIfile\fR to archive file
number 0: instead of a move followed by the creation of a new \fIfile\fR, a
copy is performed followed by a truncation of \fIfile\fR. The difference is
that in the first case (the default), if an application has \fIfile\fR
still opened, after the rotation step it will have archive file number
0 opened and usually has to reopen the new \fIfile\fR, while in the second
case the application can keep its open file handles to \fIfile\fR. The
drawback of the second approach is that logfile entries are lost when
they are written to \fIfile\fR between the execution of the copy and the
subsequent truncation operation.
.Sp
Option ``\fB\-r\fR'' removes \fIfile\fR after rotation instead of providing a
new empty file. Option ``\fB\-a\fR'' forces archive files to be created in
the separate directory \fIdir\fR.
.Sp
Option ``\fB\-z\fR'' enables compression of archive files with compression
level \fIlevel\fR (if option ``\fB\-b\fR'' is present, compression takes place in
background). By default, the tools \fIbzip2\fR\|(1), \fIgzip\fR\|(1) and \fIcompress\fR\|(1) are
searched for in \f(CW\*(C`$PATH\*(C'\fR (in this order), but one also can override this
by prefixing the compression level with one of the three particular tool
names. Option ``\fB\-d\fR'' delays the compression of archive file number 0.
This is useful if option ``\fB\-c\fR'' is not used, because an application
might still write to archive file 0 (through an open file handle).
.Sp
Option ``\fB\-p\fR'' enables padding with leading zeros in the \fInumber\fR
part of the filename "\fIfile\fR.\fInumber\fR\fIcompress-suffix\fR". The default
padding \fIlen\fR is 1. This is interesting if more than 10 archive files
are used, because it leads to still sorted directory listings.
.Sp
Options ``\fB\-o\fR'', ``\fB\-g\fR'' and ``\fB\-m\fR'' can be used to make sure that
the created files have particular file attributes. The valid arguments
are the same as for \fIchown\fR\|(1), \fIchgrp\fR\|(1) and \fIchmod\fR\|(1). Be aware that using
options ``\fB\-o\fR'' and ``\fB\-g\fR'' require root privileges.
.Sp
Option ``\fB\-M\fR'' allows one to execute a \*(L"migration\*(R" command just before
the archive file number \fIcount\fR\-1 is removed from the filesystem. The
specified \fIcmd\fR gets the archive filename as an argument appended.
Options ``\fB\-P\fR'' (prolog) and ``\fB\-E\fR'' (epilog) can be used to execute
commands before and after the rotation step. They are interesting in
conjunction with option ``\fB\-s\fR'', because they are not executed at all
if it is decided that no rotation step is performed.
.Sp
Option ``\fB\-f\fR'' (force) can be used to allow the archive directory
(option ``\fB\-a\fR'') to be silently created if it still does not exist and
that still not existing intermediate logfiles are silently skipped in
the rotation step.
.Sp
Option ``\fB\-v\fR'' (verbose) can be used to display the files which are
rotated. Option ``\fB\-t\fR'' (trace) can be used to enable the output of
the essential shell commands which are executed for the rotation step.
.Sp
Example:
.Sp
.Vb 4
\&  #   shell script
\&  shtool rotate -n10 -s1M -zbzip2:9 -d -r /var/log/ap.access.log
\&  shtool rotate -n5 -s128K -zbzip2:9 -d -r /var/log/ap.error.log
\&  apachectl graceful
.Ve
.Ip "\fBtarball\fR [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-o\fR|\fB\*(--output\fR \fItarball\fR] [\fB\-c\fR|\fB\*(--compress\fR \fIprog\fR] [\fB\-u\fR|\fB\*(--user\fR \fIuser\fR] [\fB\-g\fR|\fB\*(--group\fR \fIgroup\fR] [\fB\-e\fR|\fB\*(--exclude\fR \fIpattern\fR] \fIpath\fR [\fIpath\fR ...]" 4
.IX Item "tarball [-t|trace] [-v|verbose] [-o|output tarball] [-c|compress prog] [-u|user user] [-g|group group] [-e|exclude pattern] path [path ...]"
This command is for `rolling' distribution `tarballs', i.e. for the creation
of distribution files generated by `\f(CW\*(C`tar\*(C'\fR'. The important aspects of
standardized free software tarballs are: first they have to unpack into a
single top-level directory; second this top-level directory should correspond
to the tarball filename (i.e. a tarball `\f(CW\*(C`foobar\-0.8.15.tar\*(C'\fR' per convention
unpacks into a top-level directory `\f(CW\*(C`foobar\-0.8.15/\*(C'\fR'); third the files in
the tarball should be sorted to allow users to use the `\f(CW\*(C`tar tvf \-\*(C'\fR' command
in a reasonable way; fourth the owner and group of the files in the tarball
for security reasons can be set to arbitrary names.
.Sp
The input files are given by the file or directory arguments \fIpath\fR.
Directories are expanded before the comma-separated exclude (option \fB\-e\fR)
\&\fIpattern\fRs (\fBgrep\fR regular expressions) are used to filter the list.  The
default filter is ``\f(CW\*(C`CVS,\e\e.cvsignore,\e\e.[oa]\e$\*(C'\fR''. Then the tarball is
created with its files owned by \fIuser\fR (option \fB\-u\fR) and \fIgroup\fR (option
\&\fB\-g\fR). Finally the resulting tarball is piped through an optional compression
(option \fB\-c\fR) program and written to the output file \fItarball\fR (option
\&\fB\-o\fR).  Option ``\fB\-v\fR'' can be used to display the files which are stored in
the tarball. Option ``\fB\-t\fR'' (trace) can be used to enable the output of the
essential shell commands which are executed.
.Sp
The trick of this command is that it combines the complex process of rolling a
good tarball into a \fIsingle\fR command.
.Sp
Example:
.Sp
.Vb 6
\&  #   Makefile.in
\&  dist:
\&      ...
\&      V=`shtool version -d short ...'; \e
\&      shtool tarball -o foobar-$$V.tar.gz -c 'gzip -9' \e
\&                     -u bar -g gnu -e 'CVS,\e.cvsignore' .
.Ve
.Ip "\fBsubst\fR [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-n\fR|\fB\*(--nop\fR] [\fB\-s\fR|\fB\*(--stealth\fR] [\fB\-i\fR|\fB\*(--interactive\fR] [\fB\-b\fR|\fB\*(--backup\fR \fIext\fR] [\fB\-e\fR|\fB\*(--exec\fR \fIcmd\fR] [\fB\-f\fR|\fB\*(--file\fR \fIcmd-file\fR] [\fIfile\fR] [\fIfile\fR ...]" 4
.IX Item "subst [-v|verbose] [-t|trace] [-n|nop] [-s|stealth] [-i|interactive] [-b|backup ext] [-e|exec cmd] [-f|file cmd-file] [file] [file ...]"
This command applies one or more \fIsed\fR\|(1) substitution operations to
\&\fIstdin\fR or any number of files. The \fIsed\fR\|(1) operations are either
specified on the command line with option ``\fB\-e\fR'' or are contained
in a file \fIcmd-file\fR and are specified with option ``\fB\-f\fR''. The
original untouched \fIfile\fR is usually overridden. If option ``\fB\-b\fR''
is given and specifies a file extension, the original file is preserved
as ``\fIfile\fR.\fIext\fR''. If option ``\fB\-s\fR'' (stealth) is specified,
the timestamp is preserved on \fIfile\fR, too. Option ``\fB\-i\fR'' enables
interactive mode where the user has to approve each operation. Option
``\fB\-n\fR'' (no operation) can be used to disable the actual execution of
the essential shell commands which would be executed. Option ``\fB\-t\fR''
(trace) can be used to enable the output of the essential shell commands
which are executed. Option ``\fB\-v\fR'' (verbose) can be used to display
the files which are patched.
.Sp
Example:
.Sp
.Vb 2
\&  #    interactive shell
\&  shtool subst -i -e 's;(c) \e([0-9]*\e)-2000;(c) \e1-2001;' *.[ch]
.Ve
.Vb 7
\&  #    RPM spec-file
\&  %install
\&      shtool subst -v -n \e
\&          -e 's;^\e(prefix=\e).*;\e1 $RPM_BUILD_ROOT%{_prefix};g' \e
\&          -e 's;^\e(sysconfdir=\e).*;\e1 $RPM_BUILD_ROOT%{_prefix}/etc;g' \e
\&          `find . -name Makefile -print`
\&      make install
.Ve
.Ip "\fBguessos\fR" 4
.IX Item "guessos"
This command is a simple operating system and platform architecture guesser
which determines a so-called ``\s-1GNU\s0 \fIplatform-triple\fR'' style identification
string ``\fIarch\fR-\fIhardware\fR-\fIos\fR\fIosversion\fR''. For instance a FreeBSD 3.1
running on a Pentium \s-1II\s0 is identified as ``\f(CW\*(C`i686\-pc\-freebsd3.1\*(C'\fR''.  When you
need a more sophisticated platform guesser, use the \s-1GNU\s0
\&\f(CW\*(C`config.guess\*(C'\fR/\f(CW\*(C`config.sub\*(C'\fR scripts, please.
.Sp
.Vb 2
\& #   configure.in
\& OS=`shtool guessos`
.Ve
.Ip "\fBarx\fR [\fB\-t\fR|\fB\*(--trace\fR] [\fB\-C\fR|\fB\*(--command\fR \fIcmd\fR] \fIop\fR \fIarchive\fR \fIfile\fR [\fIfile\fR ...]" 4
.IX Item "arx [-t|trace] [-C|command cmd] op archive file [file ...]"
This is a wrapper around the archive (``\f(CW\*(C`ar\*(C'\fR'') tool. It provides the ability
to create archives out of existing archives, i.e.  if one of \fIfile\fR matches
``\f(CW\*(C`*.a\*(C'\fR'' the archive member files of \fIfile\fR are used instead of \fIfile\fR
itself. When option ``\fB\-t\fR'' (trace) is given \fBarx\fR shows the actually
involved shell commands. Option ``\fB\-C\fR'' can be used to set the ``ar''
command to \fIcmd\fR.
.Sp
The trick of this command is the automatic handling of archive members which
is especially interesting if one wants to construct a (usually top-level)
library archive out of pre-build sub-library archives (usually staying inside
subdirs) in a large source tree.
.Sp
Example:
.Sp
.Vb 10
\& #   Makefile
\& AR=ar
\& RANLIB=ranlib
\&   :
\& OBJS=foo.o bar.o
\& LIBS=baz/libbaz.a quux/libquux.a
\&   :
\& libfoo.a: $(OBJS) $(LIBS)
\&     shtool arx -C $(AR) rc libfoo.a $(OBJS) $(LIBS)
\&     $(RANLIB) libfoo.a
.Ve
.Ip "\fBslo\fR [\fB\-p\fR|\fB\*(--prefix\fR \fIstr\fR] \*(-- \fB\-L\fR\fIdir\fR \fB\-l\fR\fIlib\fR [ \fB\-L\fR\fIdir\fR \fB\-l\fR\fIlib\fR ... ]" 4
.IX Item "slo [-p|prefix str]  -Ldir -llib [ -Ldir -llib ... ]"
This command separates the linker options ``\fB\-L\fR'' and ``\fB\-l\fR'' by library
class. It's argument line can actually be an arbitrary command line where those
options are contained. \fBslo\fR parses these two options only and ignores the
remaining contents. The result is a trivial shell script on \f(CW\*(C`stdout\*(C'\fR which
defines six variables containing the ``\fB\-L\fR'' and ``\fB\-l\fR'' options sorted by
class:
.Sp
``\f(CW\*(C`SLO_DIRS_OBJ\*(C'\fR'' and ``\f(CW\*(C`SLO_LIBS_OBJ\*(C'\fR'' contains the ``\fB\-L\fR'' and
``\fB\-l\fR'' options of static libraries,  ``\f(CW\*(C`SLO_DIRS_PIC\*(C'\fR'' and
``\f(CW\*(C`SLO_LIBS_PIC\*(C'\fR'' contains the ``\fB\-L\fR'' and ``\fB\-l\fR'' options of static
libraries containing \s-1PIC\s0 (\*(L"Position Independent Code\*(R") and
``\f(CW\*(C`SLO_DIRS_DSO\*(C'\fR'' and ``\f(CW\*(C`SLO_LIBS_DSO\*(C'\fR'' contains the ``\fB\-L\fR'' and
``\fB\-l\fR'' options of shared libraries. The \fB\-p\fR option can be used to
change the default variable prefix from "\f(CW\*(C`SLO_\*(C'\fR" to \fIstr\fR.
.Sp
The intent of this separation is to provide a way between static and shared
libraries which is important if one wants to link custom DSOs against
libraries, because not all platforms all one to link these DSOs against shared
libraries. So one first has to separate out the shared libraries and link the
\&\s-1DSO\s0 only against the static libraries.  One can use this command also to just
sort the options.
.Sp
Example:
.Sp
.Vb 5
\&  #   configure.in
\&  LINK_STD="$LDFLAGS $LIBS"
\&  eval `shtool slo $LINK_STD`
\&  LINK_DSO="$SLO_DIRS_OBJ $SLO_LIBS_OBJ $SLO_DIRS_PIC $SLO_LIBS_PIC"
\&    :
.Ve
.Ip "\fBscpp\fR [\fB\-v\fR|\fB\*(--verbose\fR] [\fB\-p\fR|\fB\*(--preserve\fR] [\fB\-f\fR|\fB\*(--filter\fR \fIfilter\fR] [\fB\-o\fR|\fB\*(--output\fR \fIofile\fR] [\fB\-t\fR|\fB\*(--template\fR \fItfile\fR] [\fB\-M\fR|\fB\*(--mark\fR \fImark\fR] [\fB\-D\fR|\fB\*(--define\fR \fIdname\fR] [\fB\-C\fR|\fB\*(--class\fR \fIcname\fR] \fIfile\fR [\fIfile\fR ...]" 4
.IX Item "scpp [-v|verbose] [-p|preserve] [-f|filter filter] [-o|output ofile] [-t|template tfile] [-M|mark mark] [-D|define dname] [-C|class cname] file [file ...]"
This command is an additional \s-1ANSI\s0 C source file pre-processor for sharing
\&\fIcpp\fR\|(1) code segments, internal variables and internal functions. The intention
for this comes from writing libraries in \s-1ANSI\s0 C. Here a common shared internal
header file is usually used for sharing information between the library
source files.
.Sp
The operation is to parse special constructs in \fIfile\fRs, generate a few
things out of these constructs and insert them at position \fImark\fR in \fItfile\fR
by writing the output to \fIofile\fR. Additionally the \fIfile\fRs are never touched
or modified. Instead the constructs are removed later by the \fIcpp\fR\|(1) phase of
the build process. The only prerequisite is that every \fIfile\fR has a
``\f(CW\*(C`#include "\*(C'\fR\fIofile\fR\f(CW\*(C`"\*(C'\fR'' at the top.
.Sp
This command provides the following features: First it avoids namespace
pollution and reduces prototyping efforts for internal symbols by recognizing
functions and variables which are defined with the storage class identifier
``\fIcname\fR''.  For instance if \fIcname\fR is ``intern'', a function ``\f(CW\*(C`intern
void *foobar(int quux)\*(C'\fR'' in one of the \fIfile\fRs is translated into both a
``\f(CW\*(C`#define foobar _\|_foobar\*(C'\fR'' and a ``\f(CW\*(C`extern void *foobar(int quux);\*(C'\fR'' in
\&\fIofile\fR. Additionally a global ``\f(CW\*(C`#define\*(C'\fR \fIcname\fR \f(CW\*(C`/**/\*(C'\fR'' is also
created in \fIofile\fR to let the compiler silently ignore this additional
storage class identifier.
.Sp
Second, the library source files usually want to share \f(CW\*(C`typedef\*(C'\fRs,
\&\f(CW\*(C`#define\*(C'\fRs, etc.  over the source file boundaries. To achieve this one can
either place this stuff manually into \fItfile\fR or use the second feature of
\&\fBscpp\fR: All code in \fIfile\fRs encapsulated with ``\f(CW\*(C`#if \*(C'\fR\fIdname\fR ...
\&\f(CW\*(C`#endif\*(C'\fR'' is automatically copied to \fIofile\fR. Additionally a global
``\f(CW\*(C`#define\*(C'\fR \fIdname\fR \f(CW\*(C`0\*(C'\fR'' is also created in \fIofile\fR to let the compiler
silently skip this parts (because it was already found in the header).
.Sp
Option ``\fB\-v\fR'' can be used to enable some processing output. Option
``\fB\-p\fR'' can be used to make the decision whether to overwrite \fIofile\fR
independent of the generated ``#line'' lines. This is useful for
Makefiles if the real contents of \fIofile\fR will not change, just
line numbers. Option ``\fB\-f\fR'' (which can occur multiple times) can
be used to apply one or more pre-processing \fIsed\fR\|(1) \fIfilter\fR commands
(usually of type ``\f(CW\*(C`s/.../.../\*(C'\fR'') to each input file before their
input is parsed.
.Sp
Example:
.Sp
.Vb 5
\&  #   Makefile
\&  SRCS=foo_bar.c foo_quux.c
\&  foo_p.h: foo_p.h.in
\&       shtool scpp -o foo_p.h -t foo_p.h.in \e
\&                   -M %%MARK%% -D cpp -C intern $(SRCS)
.Ve
.Vb 5
\&  /* foo_p.h.in */
\&  #ifndef FOO_P_H
\&  #define FOO_P_H
\&  %%MARK%%
\&  #endif /* FOO_P_H */
.Ve
.Vb 11
\&  /* foo_bar.c */
\&  #include "foo_p.h"
\&  #if cpp
\&  #define OURS_INIT 4711
\&  #endif
\&  intern int ours;
\&  static int myone = 0815;
\&  intern int bar(void)
\&  {
\&      ours += myone;
\&  }
.Ve
.Vb 12
\&  /* foo_quux.c */
\&  #include "foo_p.h"
\&  int main(int argc, char *argv[])
\&  {
\&      int i;
\&      ours = OURS_INIT
\&      for (i = 0; i < 10; i++) {
\&          bar();
\&          printf("ours now %d\en", ours);
\&      }
\&      return 0;
\&  }
.Ve
.Ip "\fBversion\fR [\fB\-l\fR|\fB\*(--language\fR \fIlang\fR] [\fB\-n\fR|\fB\*(--name\fR \fIname\fR] [\fB\-p\fR|\fB\*(--prefix\fR \fIprefix\fR] [\fB\-s\fR|\fB\*(--set\fR \fIversion\fR] [\fB\-e\fR|\fB\*(--edit\fR] [\fB\-i\fR|\fB\*(--increase\fR \fIknob\fR] [\fB\-d\fR|\fB\*(--display\fR \fItype\fR] \fIfile\fR" 4
.IX Item "version [-l|language lang] [-n|name name] [-p|prefix prefix] [-s|set version] [-e|edit] [-i|increase knob] [-d|display type] file"
This command generates and maintains a version information
file \fIfile\fR for program name \fIname\fR in either textual
(\fIlang\fR="\f(CW\*(C`txt\*(C'\fR"), \s-1ANSI\s0 C (\fIlang\fR=\*(L"c\*(R"), Perl (\fIlang\fR=\*(L"perl\*(R") or
Python (\fIlang\fR=\*(L"python\*(R") language. The version is always described
with a triple <\fIversion\fR,\fIrevision\fR,\fIlevel\fR> and is
represented by a string which always matches the regular expression
``\f(CW\*(C`[0\-9]+\e.[0\-9]+[sabp.][0\-9]+\*(C'\fR''. When the option ``\fB\-s\fR'' is given,
the contents of \fIfile\fR is overridden with the specified \fIversion\fR.
.Sp
When option ``\fB\-i\fR'' is used, the current version in \fIfile\fR is updated
by increasing one element of the version where \fIknob\fR can be one of
the following: ``\f(CW\*(C`v\*(C'\fR'' for increasing the version by 1 (and resetting
revision and level to 0), ``\f(CW\*(C`r\*(C'\fR'' for increasing the revision by 1 (and
resetting level to 0) or ``\f(CW\*(C`l\*(C'\fR'' for increasing the level by 1.  Option
``\fB\-e\fR'' can be used to interactively enter a new version.
.Sp
Unless option ``\fB\-e\fR'', ``\fB\-i\fR'' or ``\fB\-s\fR'' is specified, the performed
action is to display the current version.  Option ``\fB\-d\fR'' then can be used
to control the display type: "\f(CW\*(C`short\*(C'\fR\*(L" for a short version display, \*(R"\f(CW\*(C`long\*(C'\fR\*(L"
for a longer version display, \*(R"\f(CW\*(C`hex\*(C'\fR\*(L" for a hexadecimal display of the version
and \*(R"\f(CW\*(C`libtool\*(C'\fR" for a format suitable for use with \s-1GNU\s0 libtool.
.Sp
The hexadecimal format for a version \f(CW\*(C`v.rtl\*(C'\fR is \f(CW\*(C`VVRRTLL\*(C'\fR where \f(CW\*(C`VV\*(C'\fR
and \f(CW\*(C`RR\*(C'\fR directly correspond to \f(CW\*(C`v\*(C'\fR and \f(CW\*(C`r\*(C'\fR, \f(CW\*(C`T\*(C'\fR encodes the level
type as \f(CW\*(C`9\*(C'\fR, \f(CW\*(C`2\*(C'\fR, \f(CW\*(C`1\*(C'\fR, \f(CW\*(C`0\*(C'\fR (representing \f(CW\*(C`s\*(C'\fR, \f(CW\*(C`p\*(C'\fR/\f(CW\*(C`.\*(C'\fR, \f(CW\*(C`b\*(C'\fR, \f(CW\*(C`a\*(C'\fR
in this order) and \f(CW\*(C`LL\*(C'\fR is either directly corresponding to \f(CW\*(C`l\*(C'\fR or set
to \f(CW\*(C`99\*(C'\fR if level type is \f(CW\*(C`s\*(C'\fR.
.Sp
Example:
.Sp
.Vb 2
\& #   shell script
\& shtool version -l c -n FooBar -p foobar -s 1.2b3 version.c
.Ve
.Vb 3
\& #   configure.in
\& V=`shtool version -l c -d long version.c`
\& echo "Configuring FooBar, Version $V"
.Ve
.Ip "\fBpath\fR [\fB\-s\fR|\fB\*(--suppress\fR] [\fB\-r\fR|\fB\*(--reverse\fR] [\fB\-d\fR|\fB\*(--dirname\fR] [\fB\-b\fR|\fB\*(--basename\fR] [\fB\-m\fR|\fB\*(--magic\fR] [\fB\-p\fR|\fB\*(--path\fR \fIpath\fR] \fIstr\fR [\fIstr\fR ...]" 4
.IX Item "path [-s|suppress] [-r|reverse] [-d|dirname] [-b|basename] [-m|magic] [-p|path path] str [str ...]"
This command deals with shell \f(CW\*(C`$PATH\*(C'\fR variables. It can find a program
executable in \f(CW$PATH\fR or \fIpath\fR through one or more filenames (given by one or
more \fIstr\fR arguments). The result is the absolute filesystem path to the
program displayed on \f(CW\*(C`stdout\*(C'\fR plus an exit code of 0 if it was really
found.
.Sp
The option ``\fB\-s\fR'' can be used to suppress the output which is useful to
just test whether a program exists with the help of the return code.  The
option ``\fB\-m\fR'' enables some magic where currently for the programs
``\f(CW\*(C`perl\*(C'\fR'' and ``\f(CW\*(C`cpp\*(C'\fR'' an advanced magic search is done. The option
``\fB\-r\fR'' can be used to transform a forward path to a subdirectory into a
reverse path. Option ``\fB\-d\fR'' and ``\fB\-b\fR'' just output the directory or base
name of \fIstr\fR.
.Sp
Examples:
.Sp
.Vb 5
\& #   shell script
\& awk=`shtool path -p "${PATH}:." gawk nawk awk`
\& perl=`shtool path -m perl`
\& cpp=`shtool path -m cpp`
\& revpath=`shtool path -r path/to/subdir`
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsh\fR\|(1), \fIcp\fR\|(1), \fIrm\fR\|(1), \fImkdir\fR\|(1), \fIawk\fR\|(1), \fIsed\fR\|(1).
.SH "HISTORY"
.IX Header "HISTORY"
Some scripts contained in \s-1GNU\s0 \fBshtool\fR were already written in 1994 by
\&\fIRalf S. Engelschall\fR for use inside some private source trees. Then
they evolved into more elaborated versions over the years and were used
in various free software projects like ePerl, \s-1WML\s0, iSelect, gFONT, etc.
They were complemented with other scripts from the author which he wrote
in March 1998 for the ``Apache Autoconf-style Interface'' (\s-1APACI\s0) for
Apache 1.3. In April 1999 the \fBshtool\fR package was created out of the
accumulated master versions of the scripts and in June 1999 it entered
the status of an official \s-1GNU\s0 program and this way finally joined the
group of \s-1GNU\s0 \fBautoconf\fR, \s-1GNU\s0 \fBautomake\fR and \s-1GNU\s0 \fBlibtool\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& Ralf S. Engelschall
\& rse@engelschall.com
\& www.engelschall.com
.Ve
