/* == to be included by filesecret.h if PROTO not defined
 * this file is when no prototypes are allowed,
 * and the old varargs technique for variable arguments is the
 * the only one available; otherwise try forcing -DPROTO
 */
#ifndef PROTO
void put_data(va_alist)
va_dcl				/* brain-damaged variable arg mechanism */
{
    va_list aptr;
    stream str;
    string tag, typ;
    byte *dat;
    int dim[MaxVecDim], n = 0;

    va_start(aptr);				/* access argument list     */
    str = va_arg(aptr, stream);			/* collect mandatory args   */
    tag = va_arg(aptr, string);
    typ = va_arg(aptr, string);
    dat = va_arg(aptr, byte*);
    do {					/* loop reading dimensions  */
	if (n >= MaxVecDim)			/*   no room for any more?  */
	    error("put_data: too many dims; item %s", tag);
	dim[n] = va_arg(aptr, int);		/*   else get next argument */
    } while (dim[n++] != 0);			/* until a zero comes up    */
    put_data_sub(str, tag, typ, dat, (dim[0] != 0 ? dim : NULL), FALSE);
						/* call next level routine  */
    va_end(aptr);
}
#if defined(RANDOM)
/*
 * PUT_DATA_SET: open an item for random access
 * Synopsis: put_data_set(str, tag, typ, dimN, ..., dim1, 0)
 */

void put_data_set(va_alist)
va_dcl				/* brain-damaged variable arg mechanism */
{
    va_list aptr;
    stream str;
    string tag, typ;
    int dim[MaxVecDim], *buf, n = 0;
    itemptr ipt;
    strstkptr sspt;

    va_start(aptr);				/* access argument list     */
    str = va_arg(aptr, stream);			/* collect mandatory args   */
    tag = va_arg(aptr, string);
    typ = va_arg(aptr, string);
    do {					/* loop reading dimensions  */
	if (n >= MaxVecDim)			/*   no room for any more?  */
	    error("put_data: too many dims; item %s", tag);
	dim[n] = va_arg(aptr, int);		/*   else get next argument */
    } while (dim[n++] != 0);			/* until a zero comes up    */
    va_end(aptr);

    sspt = findstream(str);
    if (sspt->ss_ran)
        error("put_data_set: %s: can only handle one random access item",tag);
    buf = (int *) copxstr(dim,sizeof(int));
    ipt = makeitem(typ,tag,NULL,buf);            /* make item but no copy */
    sspt->ss_ran = ipt;
    puthdr(str,ipt);                           /* write the header right now */

    ItemPos(ipt) = ftell(str);                       /* begin of random data */
    sspt->ss_pos = ftell(str) + datlen(ipt,0);         /* end of random data */
}
#endif

void get_data(va_alist)
va_dcl				/* brain-damaged variable arg mechanism */
{
    va_list aptr;
    stream str;
    string tag, typ;
    byte *dat;
    int dim[MaxVecDim], n = 0;

    va_start(aptr);				/* access argument list     */
    str = va_arg(aptr, stream);			/* collect mandatory args   */
    tag = va_arg(aptr, string);
    typ = va_arg(aptr, string);
    dat = va_arg(aptr, byte*);
    do {					/* loop reading dimensions  */
	if (n >= MaxVecDim)			/*   no room for any more?  */
	    error("get_data: item %s: too many dims", tag);
	dim[n] = va_arg(aptr, int);		/*   else get next argument */
    } while (dim[n++] != 0);			/* until a zero comes up    */
    get_data_sub(str, tag, typ, dat, (dim[0] != 0 ? dim : NULL), FALSE);
    						/* call next level routine  */
    va_end(aptr);
}

void get_data_coerced(va_alist)
va_dcl				/* brain-damaged variable arg mechanism */
{
    va_list aptr;
    stream str;
    string tag, typ;
    byte *dat;
    int dim[MaxVecDim], n = 0;

    va_start(aptr);				/* access argument list     */
    str = va_arg(aptr, stream);			/* collect mandatory args   */
    tag = va_arg(aptr, string);
    typ = va_arg(aptr, string);
    dat = va_arg(aptr, byte*);
    do {					/* loop reading dimensions  */
	if (n >= MaxVecDim)			/*   no room for any more?  */
	    error("get_data_coerced: item %s: too many dims", tag);
	dim[n] = va_arg(aptr, int);		/*   else get next argument */
    } while (dim[n++] != 0);			/* until a zero comes up    */
    get_data_sub(str, tag, typ, dat, (dim[0] != 0 ? dim : NULL), TRUE);
    						/* call next level routine  */
    va_end(aptr);
}

#if defined(RANDOM)

void get_data_set(va_alist)
va_dcl				/* brain-damaged variable arg mechanism */
{
    va_list aptr;
    stream str;
    string tag, typ;
    int dim[MaxVecDim], *buf, n = 0;
    itemptr ipt;
    strstkptr sspt;

    va_start(aptr);				/* access argument list     */
    str = va_arg(aptr, stream);			/* collect mandatory args   */
    tag = va_arg(aptr, string);
    typ = va_arg(aptr, string);
    do {					/* loop reading dimensions  */
	if (n >= MaxVecDim)			/*   no room for any more?  */
	    error("put_data: too many dims; item %s", tag);
	dim[n] = va_arg(aptr, int);		/*   else get next argument */
    } while (dim[n++] != 0);			/* until a zero comes up    */
    va_end(aptr);

    sspt = findstream(str);
    if (sspt->ss_ran)
        error("put_data_set: %s: can only handle one random access item",tag);
    ipt = scantag(sspt,tag);	/* try and find the data */
    if (ipt==NULL) error("get_data_set: Bad EOF");

    sspt->ss_pos = ItemPos(ipt) + datlen(ipt,0);         /* end of random data */
    sspt->ss_ran = ipt;
}
#endif /* RANDOM */

#endif /* PROTO */

