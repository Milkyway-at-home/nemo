#! /bin/csh -f
#
#   Big test suite to test out some basic NEMO behavior
#
#   10-aug-92   Created   -   Peter Teuben  
#

onintr noclean
# These are the names of the packages to test; each of them
# must start at an associated label "l_<PACKAGE>", and end
# with the command "goto $return"
#
set tests=(filestruct getparam snapshot)

# Set some defaults, which can be reset using yet to implement commandline
# options
set cleanup=1

# process command line options
if ($#argv == 0) then
  echo "Need to supply a list of packages to test, or use the 'all' option"
  echo "Valid options are:"
  echo ""
  echo " $tests"
  exit 0
else
  if ($argv[1] == all) then
    set todo=($tests)
  else
    set todo=()
    foreach a ($*)
      foreach t ($tests)
        if ($a == $t) then
          set todo=($todo $a)
          break
        endif
      end
      if ($a != $t) then
        echo Warning: skipping unknown option $a 
      endif
    end
    echo Testing the following packages: $todo
  endif
endif

# set some  work variables
set tmp=tmp$$


###########################################################################
# In this loop all packages are called, and control is returned to this 
# point when the work in there is done.
loop1:
  if ($#todo == 0) goto all_done
  set work=$todo[1]
  set label=l_$work
  set return=loop1
  shift todo

  goto $label

all_done:
  if ($cleanup) then
    echo ""
    echo "Cleaning up all $tmp files"
    rm -rf $tmp.* >& /dev/null
  endif

exit 0
#
###########################################################################
#
l_filestruct:
  echo Working on filestruct:
  need -m rsf tsf csf
  echo "    Testing rsf/tsf conversions"
    # Create a small 'ASF' file
    echo "double xvar 1.2369" | tee $tmp.0 > $tmp.1
    echo "float yvar 3.141592"            >> $tmp.1
    echo "int ivar 07777"                 >> $tmp.1
    echo "set Example"                    >> $tmp.1
    echo "    double xvar 1.23"           >> $tmp.1
    echo "tes"                            >> $tmp.1
    rsf in=$tmp.1 out=$tmp.2
    if ($status) echo "### Unexpected error using rsf"
    tsf in=$tmp.2 > $tmp.3
    if ($status) echo "### Unexpected error using tsf"
    rsf in=$tmp.3 out=$tmp.4
    tsf in=$tmp.4 > $tmp.5
    cmp -s $tmp.3 $tmp.5
    if ($status) echo "### Bad RSF/TSF conversion"
  echo "    Testing if pipes work in binary structured files"
    cat $tmp.1 | rsf in=- out=$tmp.6
    cmp -s $tmp.2 $tmp.6
    if ($status) echo "### Pipes cannot be used in reading"
    rsf in=$tmp.1 out=- > $tmp.7
    cmp -s $tmp.2 $tmp.7
    if ($status) echo "### Pipes cannot be used in writing"
  echo "    Testing extraction using csf"
    rsf in=$tmp.0 out=$tmp.8
    csf in=$tmp.2 out=$tmp.9 item=xvar >& /dev/null
    cmp -s $tmp.8 $tmp.9
    if ($status) echo "### csf failed to extract"

  goto $return
#
###########################################################################
#
l_getparam:
  echo Working on getparam:
    set x=(`nemoinp 1:10`)
    if ($#x != 10) echo "### nemoinp: cannot use implied do-loops"
    set y=`nemoinp 'sqrt(4)'`
    if ($y != 2) echo "### nemoinp: sqrt(4) was evaluated as $y"
  goto $return
#
###########################################################################
#
l_snapshot:
  echo Working on snapshot:
    need -m mkplummer snapstat snapprint
    mkplummer out=$tmp.100 nbody=10 
    if ($status) echo "### Error running mkplummer"
    snapstat in=$tmp.100 >& /dev/null
    if ($status) echo "### Error running snapstat"
    snapprint in=$tmp.100 >& /dev/null
    if ($status) echo "### Error running snapprint"
    hackcode1 in=$tmp.100 out=$tmp.101 tstop=1 fcells=2 >& /dev/null
    if ($status) echo "### Error running hackcode1"
    nbody0 in=$tmp.100 out=$tmp.102 tcrit=1 >& /dev/null
    if ($status) echo "### Error running nbody0"

  goto $return
#
###########################################################################
#
noclean:
  echo Interrupted, temporary files $tmp.\* will not be cleaned
