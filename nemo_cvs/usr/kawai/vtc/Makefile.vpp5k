CC = vcc
# if you have io_nemo lib (written by JCL)
# IONEMOFLAGS = -DIONEMO
# IONEMOLIB = -L$(NEMOLIB) -lio_nemo -lnemo
# 
# USEX11: use animation tools.
# VECTORIZED: activate functions in treev.c. faster on vector
#             processor and some other platforms.
# BFLOAD: activate functions in treebfl.c. performs breadth-first
#         tree construction. may be slightly faster on vector processor.
# DYNMEM: use dynamic memory allocation. should be set to 1 unless you
#         have any special reason.

CFLAGS = -K3 -O -Wl,-J -I. -o $@  -x get_separation \
         -I/home/atsushi/src/md2v1.39 -I/home/atsushi/pub/include \
         $(IONEMOFLAGS) -DUSEX11=0 -DVECTORIZED=1 -DBFLOAD=0 -DDYNMEM=0\
 -Wv,-Ps,-m2,-qs -Z $@.list

STDOBJS = tree.o direct.o sort.o cputime.o viewtree.o p2m2.o mr1interface.o
LDFLAGS = -K3 -O -L. -L/home/atsushi/pub/lib -Wv,-Ps,-m2,-qs -Z $@.list
LIBS = $(IONEMOLIB) -lgd -lm
AOBJS = animation.o Xtc.o
ALIBS = -lX11
ALIBPATH = /usr/X11/lib

# for host only
# LIBOBJS = $(STDOBJS) force_md2.o
# GFLAGS = -DNOGRAPE
#
# for MDGRAPE-2
GFLAGS = -I/home/atsushi/src/md2v1.39
LIBOBJS = $(STDOBJS) force_md2.o
GLIBPATH = /home/atsushi/src/md2v1.39
GLIBS = -lmd1pcimdanger
#
# for GRAPE-5
# LIBOBJS = $(STDOBJS) force_g5.o
# GLIBPATH = /home/atsushi/pub/lib
# GLIBS = -lg5a -lphibdma

all:	vtc libvtc.a

vtc:	vtc.c libvtc.a
	$(CC) $(CFLAGS) -L$(GLIBPATH) $(LDFLAGS) vtc.c \
	-lvtc $(GLIBS) $(LIBS)

libvtc.a: $(LIBOBJS)
	ar ruv $@ $?

force_md2.o:	force_md2.c
	$(CC) $(CFLAGS) $(GFLAGS) -c force_md2.c

force_g5.o:	force_g5.c
	$(CC) $(CFLAGS) $(GFLAGS) -c force_g5.c

tree.o:			tree.c treev.c treebfl.c highorder.c debug.c

clean:
	\rm *.o *.a *.list

bak:
	tar cvf bak.tar ./Makefile*[a-zA-Z0-9] ./*.[hcCfF] ./*.table ./00README
	gzip bak.tar
