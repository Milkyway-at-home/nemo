%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 595.3 841.9 0 1 8 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Courier FMFONTDEFINE
2 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
0 36 Q
0 X
(V) 262.36 661.9 T
(OGL) 287.62 661.9 T
(A very ordinary GL Like) 121.02 577.9 T
(Library) 254.01 535.9 T
(Documentation) 197.02 409.9 T
1 10 Q
(           Copyright \050C\051 1991, 1992 The University of Melbourne.) 72 152.23 T
(               Department of Engineering Computer Resources.) 72 128.23 T
(        This programme source code may be copied or distributed in any) 72 92.23 T
(        medium or modified provided each copy or modified copy retains) 72 80.23 T
(        this copyright notice and the disclaimer that this software is) 72 68.23 T
(        distributed without any warranty implied or otherwise that it) 72 56.23 T
(        is error free and that it meets the recipients requirements.) 72 44.23 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 9 Q
0 X
(README:) 108 817.9 T
(The directories in this directory contain the source for the VOGL library) 108 795.9 T
(and the library hershey which is for manipulating the Hershey font data.) 108 784.9 T
(They are as follows:) 108 762.9 T
(        docs            contains the documentation such as there is.) 108 740.9 T
(        drivers         contains the source to a variety of device drivers,) 108 718.9 T
(                        currently restricted to: postcript, sun workstation,) 108 707.9 T
(                        apollo workstations, X11 \050R2, R3 & R4\051, tektronix) 108 696.9 T
(                        \050401x\051, hpgl, dxy, and the ibm pc cards: hercules mono,) 108 685.9 T
(                        cga, ega, vga and sigma.) 108 674.9 T
(        examples        contains some C and FORTRAN programs useful both in) 108 652.9 T
(                        testing and \050hopefully\051 learning how to use it.) 108 641.9 T
(                        There are subdirectories xview,xt and sunview showing) 108 630.9 T
(                        how to use an x toolkit \050or sunview\051 with VOGL.) 108 619.9 T
(        hershey         contains the source for the hershey library plus the) 108 597.9 T
(                        source for generating fonts and the hershey data for) 108 586.9 T
(                        the occidental and oriental character sets. Note: as) 108 575.9 T
(                        with VOGL this library is callable in C and FORTRAN.) 108 564.9 T
(        src             contains the source for the C VOGL interface, and the) 108 542.9 T
(                        source for the FORTRAN interfaces where available.) 108 531.9 T
(If you have a real SGI machine with GL on it, you can simply compile the) 108 509.9 T
(Hershey library and the examples with "make -f Makefile.sgi". Otherwise,) 108 498.9 T
(you will have to edit the Makefile to set various options for your machine) 108 487.9 T
(and type "make".) 108 476.9 T
(VOGL is a device portable graphics library that tries to be Silicon Graphics) 108 454.9 T
(Iris GL compatible. Our intention is that any VOGL program will compile) 108 443.9 T
(unchanged on a machine running SGI GL \050the examples do\051. VOGL is based) 108 432.9 T
(entirely on our other graphics library VOGLE. While we still regard VOGLE) 108 421.9 T
(as our main library \050it is, and probably will be for some time to come, the) 108 410.9 T
(one that gets the most use around here\051, we will gratefully accept any bug) 108 399.9 T
(fixes or enhancements. As always suggestions are also welcome.) 108 388.9 T
(This software may be used for any purpose commercial or otherwise. It is) 108 366.9 T
(offered without any guarantee as to its suitability for any purpose or as) 108 355.9 T
(to the sanity of its writers. We do ask that the source is passed on to) 108 344.9 T
(anyone that requests a copy, and that people who get copies don\325t go round) 108 333.9 T
(claiming they wrote it \050that is why this one has a copyright notice in it,) 108 322.9 T
(see file COPYRIGHT\051.) 108 311.9 T
(Although VOGL is free we will drink any quantity of Beer you send to us.) 108 289.9 T
(Regards,) 108 267.9 T
(        Eric H. Echidna) 108 245.9 T
(Snail mail correspondance and alcoholic beverages should be directed to:) 108 223.9 T
(        The Software Support Programmer) 108 201.9 T
(        Department Of Engineering Computer Resources) 108 190.9 T
(        Faculty Of Engineering) 108 179.9 T
(        University Of Melbourne Vic 3052) 108 168.9 T
(        Australia) 108 157.9 T
(email to) 108 135.9 T
(        echidna@munnari.OZ.AU) 108 113.9 T
(        echidna@ecr.mu.OZ.AU) 108 102.9 T
(        echidna@gondwana.ecr.mu.OZ.AU) 108 91.9 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
2 24 Q
0 X
(Contents) 257.43 776.9 T
1 14 Q
(1) 108 735.57 T
(Overview) 144 735.57 T
(...............................) 226.68 735.57 T
( 1) 487.21 735.57 T
1 12 Q
(1.1) 108 715.9 T
(Name and Description) 144 715.9 T
(..........................) 302.23 715.9 T
( 1) 489.61 715.9 T
(1.2) 108 701.9 T
(Include Files) 144 701.9 T
(.................................) 251.86 701.9 T
( 1) 489.61 701.9 T
(1.3) 108 687.9 T
(Using X Toolkits and Sunview) 144 687.9 T
(..................) 359.8 687.9 T
( 1) 489.61 687.9 T
1 14 Q
(2) 108 667.57 T
(Device Routines) 144 667.57 T
(........................) 285.44 667.57 T
( 2) 487.21 667.57 T
1 12 Q
(2.1) 108 647.9 T
(vinit) 144 647.9 T
(.........................................) 194.29 647.9 T
( 2) 489.61 647.9 T
(2.2) 108 633.9 T
(ginit) 144 633.9 T
(.........................................) 194.29 633.9 T
( 3) 489.61 633.9 T
(2.3) 108 619.9 T
(winopen) 144 619.9 T
(.......................................) 208.68 619.9 T
( 4) 489.61 619.9 T
(2.4) 108 605.9 T
(gexit) 144 605.9 T
(.........................................) 194.29 605.9 T
( 4) 489.61 605.9 T
(2.5) 108 591.9 T
(voutput) 144 591.9 T
(.......................................) 208.68 591.9 T
( 4) 489.61 591.9 T
(2.6) 108 577.9 T
(vnewdev) 144 577.9 T
(.......................................) 208.68 577.9 T
( 5) 489.61 577.9 T
1 14 Q
(3) 108 557.57 T
(Routines for Controlling Flushing or) 144 557.57 T
(Synchronisation) 144 541.57 T
(........................) 285.44 541.57 T
( 5) 487.21 541.57 T
1 12 Q
(3.1) 108 521.9 T
(vsetflush) 144 521.9 T
(.....................................) 223.08 521.9 T
( 5) 489.61 521.9 T
(3.2) 108 507.9 T
(vflush) 144 507.9 T
(........................................) 201.49 507.9 T
( 6) 489.61 507.9 T
1 14 Q
(4) 108 487.57 T
(Routines for Setting Up Windows) 144 487.57 T
(........) 419.77 487.57 T
( 6) 487.21 487.57 T
1 12 Q
(4.1) 108 467.9 T
(prefposition) 144 467.9 T
(..................................) 244.67 467.9 T
( 6) 489.61 467.9 T
(4.2) 108 453.9 T
(prefsize) 144 453.9 T
(......................................) 215.88 453.9 T
( 6) 489.61 453.9 T
(4.3) 108 439.9 T
(reshapeviewport) 144 439.9 T
(...............................) 266.25 439.9 T
( 7) 489.61 439.9 T
1 14 Q
(5) 108 419.57 T
(General Routines) 144 419.57 T
(.......................) 293.84 419.57 T
( 7) 487.21 419.57 T
1 12 Q
(5.1) 108 399.9 T
(clear) 144 399.9 T
(.........................................) 194.29 399.9 T
( 7) 489.61 399.9 T
(5.2) 108 385.9 T
(color) 144 385.9 T
(.........................................) 194.29 385.9 T
( 7) 489.61 385.9 T
(5.3) 108 371.9 T
(colorf) 144 371.9 T
(........................................) 201.49 371.9 T
( 7) 489.61 371.9 T
(5.4) 108 357.9 T
(mapcolor) 144 357.9 T
(......................................) 215.88 357.9 T
( 8) 489.61 357.9 T
(5.5) 108 343.9 T
(defbasis) 144 343.9 T
(......................................) 215.88 343.9 T
( 8) 489.61 343.9 T
(5.6) 108 329.9 T
(polymode) 144 329.9 T
(......................................) 215.88 329.9 T
( 8) 489.61 329.9 T
1 14 Q
(6) 108 309.57 T
(Device Queue and Valuator Routines) 144 309.57 T
(.....) 444.95 309.57 T
( 9) 487.21 309.57 T
1 12 Q
(6.1) 108 289.9 T
(qdevice) 144 289.9 T
(.......................................) 208.68 289.9 T
( 9) 489.61 289.9 T
(6.2) 108 275.9 T
(unqdevice) 144 275.9 T
(.....................................) 223.08 275.9 T
( 9) 489.61 275.9 T
(6.3) 108 261.9 T
(qread) 144 261.9 T
(.........................................) 194.29 261.9 T
( 9) 489.61 261.9 T
(6.4) 108 247.9 T
(isqueued) 144 247.9 T
(.....................................) 215.88 247.9 T
( 10) 482.41 247.9 T
(6.5) 108 233.9 T
(qtest) 144 233.9 T
(........................................) 194.29 233.9 T
( 10) 482.41 233.9 T
(6.6) 108 219.9 T
(qreset) 144 219.9 T
(.......................................) 201.49 219.9 T
( 10) 482.41 219.9 T
(6.7) 108 205.9 T
(getbutton) 144 205.9 T
(....................................) 223.08 205.9 T
( 10) 482.41 205.9 T
(6.8) 108 191.9 T
(getvaluator) 144 191.9 T
(..................................) 237.47 191.9 T
( 10) 482.41 191.9 T
1 14 Q
(7) 108 171.57 T
(Viewport Routines) 144 171.57 T
(.....................) 302.23 171.57 T
( 11) 478.81 171.57 T
1 12 Q
(7.1) 108 151.9 T
(viewport) 144 151.9 T
(.....................................) 215.88 151.9 T
( 11) 482.41 151.9 T
(7.2) 108 137.9 T
(pushviewport) 144 137.9 T
(.................................) 244.67 137.9 T
( 11) 482.41 137.9 T
(7.3) 108 123.9 T
(popviewport) 144 123.9 T
(..................................) 237.47 123.9 T
( 11) 482.41 123.9 T
(7.4) 108 109.9 T
(getviewport) 144 109.9 T
(..................................) 237.47 109.9 T
( 11) 482.41 109.9 T
1 14 Q
(8) 108 89.57 T
(Attribute Stack Routines) 144 89.57 T
(..............) 361 89.57 T
( 12) 478.81 89.57 T
1 12 Q
(8.1) 108 69.9 T
(pushattributes) 144 69.9 T
(...............................) 259.06 69.9 T
( 12) 482.41 69.9 T
(8.2) 108 55.9 T
(popattributes) 144 55.9 T
(................................) 251.86 55.9 T
( 12) 482.41 55.9 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 14 Q
0 X
(9) 108 814.57 T
(Projection Routines) 144 814.57 T
(...................) 319.02 814.57 T
( 12) 478.81 814.57 T
1 12 Q
(9.1) 108 794.9 T
(ortho) 144 794.9 T
(........................................) 194.29 794.9 T
( 12) 482.41 794.9 T
(9.2) 108 780.9 T
(ortho2) 144 780.9 T
(.......................................) 201.49 780.9 T
( 13) 482.41 780.9 T
(9.3) 108 766.9 T
(perspective) 144 766.9 T
(..................................) 237.47 766.9 T
( 13) 482.41 766.9 T
(9.4) 108 752.9 T
(window) 144 752.9 T
(.......................................) 201.49 752.9 T
( 13) 482.41 752.9 T
1 14 Q
(10) 108 732.57 T
(Matrix Stack Routines) 144 732.57 T
(.................) 335.82 732.57 T
( 13) 478.81 732.57 T
1 12 Q
(10.1) 108 712.9 T
(pushmatrix) 144 712.9 T
(...................................) 230.27 712.9 T
( 13) 482.41 712.9 T
(10.2) 108 698.9 T
(popmatrix) 144 698.9 T
(....................................) 223.08 698.9 T
( 14) 482.41 698.9 T
1 14 Q
(11) 108 678.57 T
(Viewpoint Routines) 144 678.57 T
(....................) 310.63 678.57 T
( 14) 478.81 678.57 T
1 12 Q
(11.1) 108 658.9 T
(polarview) 144 658.9 T
(....................................) 223.08 658.9 T
( 14) 482.41 658.9 T
(11.2) 108 644.9 T
(lookat) 144 644.9 T
(.......................................) 201.49 644.9 T
( 14) 482.41 644.9 T
1 14 Q
(12) 108 624.57 T
(Move Routines) 144 624.57 T
(.........................) 268.65 624.57 T
( 15) 478.81 624.57 T
1 12 Q
(12.1) 108 604.9 T
(move) 144 604.9 T
(.........................................) 187.1 604.9 T
( 15) 482.41 604.9 T
(12.2) 108 590.9 T
(rmv) 144 590.9 T
(..........................................) 179.9 590.9 T
( 15) 482.41 590.9 T
(12.3) 108 576.9 T
(move2) 144 576.9 T
(........................................) 194.29 576.9 T
( 15) 482.41 576.9 T
(12.4) 108 562.9 T
(rmv2) 144 562.9 T
(.........................................) 187.1 562.9 T
( 15) 482.41 562.9 T
1 14 Q
(13) 108 542.57 T
(Line Routines) 144 542.57 T
(.........................) 268.65 542.57 T
( 16) 478.81 542.57 T
1 12 Q
(13.1) 108 522.9 T
(deflinestyle) 144 522.9 T
(.................................) 244.67 522.9 T
( 16) 482.41 522.9 T
(13.2) 108 508.9 T
(setlinestyle) 144 508.9 T
(.................................) 244.67 508.9 T
( 16) 482.41 508.9 T
(13.3) 108 494.9 T
(linewidth) 144 494.9 T
(....................................) 223.08 494.9 T
( 16) 482.41 494.9 T
1 14 Q
(14) 108 474.57 T
(Drawing Routines) 144 474.57 T
(......................) 293.84 474.57 T
( 17) 478.81 474.57 T
1 12 Q
(14.1) 108 454.9 T
(draw) 144 454.9 T
(.........................................) 187.1 454.9 T
( 17) 482.41 454.9 T
(14.2) 108 440.9 T
(rdr) 144 440.9 T
(..........................................) 179.9 440.9 T
( 17) 482.41 440.9 T
(14.3) 108 426.9 T
(draw2) 144 426.9 T
(........................................) 194.29 426.9 T
( 17) 482.41 426.9 T
(14.4) 108 412.9 T
(rdr2) 144 412.9 T
(.........................................) 187.1 412.9 T
( 17) 482.41 412.9 T
1 14 Q
(15) 108 392.57 T
(Vertex Calls) 144 392.57 T
(..........................) 260.26 392.57 T
( 18) 478.81 392.57 T
1 12 Q
(15.1) 108 372.9 T
(v4d, v4f, v4i, v4s) 144 372.9 T
(...........................) 287.84 372.9 T
( 18) 482.41 372.9 T
(15.2) 108 358.9 T
(bgnpoint, endpoint) 144 358.9 T
(...........................) 287.84 358.9 T
( 19) 482.41 358.9 T
(15.3) 108 344.9 T
(bgnline, endline) 144 344.9 T
(.............................) 273.45 344.9 T
( 19) 482.41 344.9 T
(15.4) 108 330.9 T
(bgnclosedline, endclosedline) 144 330.9 T
(.................) 359.8 330.9 T
( 20) 482.41 330.9 T
(15.5) 108 316.9 T
(bgnpolygone, endpolygon) 144 316.9 T
(......................) 323.82 316.9 T
( 20) 482.41 316.9 T
1 14 Q
(16) 108 296.57 T
(Arcs and Circles) 144 296.57 T
(......................) 293.84 296.57 T
( 20) 478.81 296.57 T
1 12 Q
(16.1) 108 276.9 T
(circleprecision) 144 276.9 T
(..............................) 266.25 276.9 T
( 21) 482.41 276.9 T
(16.2) 108 262.9 T
(arc, arcf) 144 262.9 T
(....................................) 223.08 262.9 T
( 21) 482.41 262.9 T
(16.3) 108 248.9 T
(circ, circf) 144 248.9 T
(..................................) 237.47 248.9 T
( 21) 482.41 248.9 T
1 14 Q
(17) 108 228.57 T
(Curve Routines) 144 228.57 T
(........................) 277.05 228.57 T
( 22) 478.81 228.57 T
1 12 Q
(17.1) 108 208.9 T
(curvebasis) 144 208.9 T
(...................................) 230.27 208.9 T
( 22) 482.41 208.9 T
(17.2) 108 194.9 T
(curveprecision) 144 194.9 T
(................................) 259.06 194.9 T
(22) 489.61 194.9 T
(17.3) 108 180.9 T
(rcrv, rcvrn) 144 180.9 T
(..................................) 244.67 180.9 T
(22) 489.61 180.9 T
(17.4) 108 166.9 T
(crv, crvn) 144 166.9 T
(....................................) 223.08 166.9 T
( 23) 482.41 166.9 T
(17.5) 108 152.9 T
(curveit) 144 152.9 T
(......................................) 208.68 152.9 T
( 23) 482.41 152.9 T
1 14 Q
(18) 108 132.57 T
(Rectangles and General Polygon Routines) 144 132.57 T
( 24) 479.82 132.57 T
1 12 Q
(18.1) 108 112.9 T
(rect, rectf) 144 112.9 T
(..................................) 237.47 112.9 T
( 24) 482.41 112.9 T
(18.2) 108 98.9 T
(poly2, polf2) 144 98.9 T
(.................................) 244.67 98.9 T
( 24) 482.41 98.9 T
(18.3) 108 84.9 T
(poly, polf) 144 84.9 T
(...................................) 230.27 84.9 T
( 25) 482.41 84.9 T
(18.4) 108 70.9 T
(backface, frontface) 144 70.9 T
(..........................) 295.04 70.9 T
( 25) 482.41 70.9 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 14 Q
0 X
(19) 108 814.57 T
(Text Routines) 144 814.57 T
(.........................) 268.65 814.57 T
( 26) 478.81 814.57 T
1 12 Q
(19.1) 108 794.9 T
(font) 144 794.9 T
(.........................................) 187.1 794.9 T
( 26) 482.41 794.9 T
(19.2) 108 780.9 T
(cmov) 144 780.9 T
(.........................................) 187.1 780.9 T
( 26) 482.41 780.9 T
(19.3) 108 766.9 T
(cmov2) 144 766.9 T
(........................................) 194.29 766.9 T
( 27) 482.41 766.9 T
(19.4) 108 752.9 T
(getheight) 144 752.9 T
(....................................) 223.08 752.9 T
( 27) 482.41 752.9 T
(19.5) 108 738.9 T
(strwidth) 144 738.9 T
(.....................................) 215.88 738.9 T
( 27) 482.41 738.9 T
1 14 Q
(20) 108 718.57 T
(Transformation Routines) 144 718.57 T
(...............) 352.61 718.57 T
( 27) 478.81 718.57 T
1 12 Q
(20.1) 108 698.9 T
(translate) 144 698.9 T
(....................................) 223.08 698.9 T
( 27) 482.41 698.9 T
(20.2) 108 684.9 T
(scale) 144 684.9 T
(........................................) 194.29 684.9 T
( 28) 482.41 684.9 T
(20.3) 108 670.9 T
(rot) 144 670.9 T
(..........................................) 179.9 670.9 T
( 28) 482.41 670.9 T
(20.4) 108 656.9 T
(rotate) 144 656.9 T
(.......................................) 201.49 656.9 T
( 28) 482.41 656.9 T
1 14 Q
(21) 108 636.57 T
(Patch Routines) 144 636.57 T
(........................) 277.05 636.57 T
( 29) 478.81 636.57 T
1 12 Q
(21.1) 108 616.9 T
(patchbasis) 144 616.9 T
(...................................) 230.27 616.9 T
( 29) 482.41 616.9 T
(21.2) 108 602.9 T
(patchprecision) 144 602.9 T
(...............................) 259.06 602.9 T
( 29) 482.41 602.9 T
(21.3) 108 588.9 T
(patchcurves) 144 588.9 T
(..................................) 237.47 588.9 T
( 29) 482.41 588.9 T
(21.4) 108 574.9 T
(rpatch) 144 574.9 T
(.......................................) 201.49 574.9 T
( 29) 482.41 574.9 T
(21.5) 108 560.9 T
(patch) 144 560.9 T
(........................................) 194.29 560.9 T
( 30) 482.41 560.9 T
1 14 Q
(22) 108 540.57 T
(Point Routines) 144 540.57 T
(........................) 277.05 540.57 T
( 30) 478.81 540.57 T
1 12 Q
(22.1) 108 520.9 T
(pnt) 144 520.9 T
(..........................................) 179.9 520.9 T
( 30) 482.41 520.9 T
(22.2) 108 506.9 T
(pnt2) 144 506.9 T
(.........................................) 187.1 506.9 T
( 30) 482.41 506.9 T
1 14 Q
(23) 108 486.57 T
(Object Routines) 144 486.57 T
(.......................) 285.44 486.57 T
( 30) 478.81 486.57 T
1 12 Q
(23.1) 108 466.9 T
(makeobj) 144 466.9 T
(......................................) 208.68 466.9 T
( 31) 482.41 466.9 T
(23.2) 108 452.9 T
(closeobj) 144 452.9 T
(.....................................) 215.88 452.9 T
( 31) 482.41 452.9 T
(23.3) 108 438.9 T
(genobj) 144 438.9 T
(.......................................) 201.49 438.9 T
( 31) 482.41 438.9 T
(23.4) 108 424.9 T
(getopenobj) 144 424.9 T
(...................................) 230.27 424.9 T
( 31) 482.41 424.9 T
(23.5) 108 410.9 T
(callobj) 144 410.9 T
(......................................) 208.68 410.9 T
( 31) 482.41 410.9 T
(23.6) 108 396.9 T
(isobj) 144 396.9 T
(........................................) 194.29 396.9 T
( 32) 482.41 396.9 T
(23.7) 108 382.9 T
(delobj) 144 382.9 T
(.......................................) 201.49 382.9 T
( 32) 482.41 382.9 T
1 14 Q
(24) 108 362.57 T
(Double Buffering) 144 362.57 T
(......................) 293.84 362.57 T
( 32) 478.81 362.57 T
1 12 Q
(24.1) 108 342.9 T
(gconfig) 144 342.9 T
(......................................) 208.68 342.9 T
( 32) 482.41 342.9 T
(24.2) 108 328.9 T
(doublebuffer, singlebuffer) 144 328.9 T
(...................) 345.41 328.9 T
( 32) 482.41 328.9 T
(24.3) 108 314.9 T
(backbuffer, frontbuffer) 144 314.9 T
(......................) 323.82 314.9 T
( 33) 482.41 314.9 T
(24.4) 108 300.9 T
(swapbuffers) 144 300.9 T
(..................................) 237.47 300.9 T
( 33) 482.41 300.9 T
1 14 Q
(25) 108 280.57 T
(Position Routines) 144 280.57 T
(.....................) 302.23 280.57 T
( 34) 478.81 280.57 T
1 12 Q
(25.1) 108 260.9 T
(getgpos) 144 260.9 T
(......................................) 208.68 260.9 T
( 34) 482.41 260.9 T
(25.2) 108 246.9 T
(getcpos) 144 246.9 T
(......................................) 208.68 246.9 T
( 34) 482.41 246.9 T
1 14 Q
(26) 108 226.57 T
(BUGS) 144 226.57 T
(..................................) 193.09 226.57 T
( 34) 478.81 226.57 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 781.23 T
2 12 Q
(NAME) 72 731.9 T
1 10 Q
(     VOGL - A very ordinary GL Like Library.) 72 719.23 T
2 12 Q
(DESCRIPTION) 72 681.9 T
1 10 Q
(     VOGL is a library of C routines which try to  allow  a  pro-) 72 669.23 T
(     grammer  to  write  programs  which can be moved to machines) 72 657.23 T
(     which have the Silicon Graphics GL library on  them.  It  is) 72 645.23 T
(     based  entirely  on  the  VOGLE  graphics  library, and as a) 72 633.23 T
(     result  can  handle  circles,  curves,  arcs,  patches,  and) 72 621.23 T
(     polygons in a device independent fashion. Simple hidden line) 72 609.23 T
(     removal is also available via polygon backfacing. Access  to) 72 597.23 T
(     hardware  text  and  double buffering of drawings depends on) 72 585.23 T
(     the driver.  There is also a FORTRAN  interface  but  as  it) 72 573.23 T
(     goes  through  the  C routines FORTRAN users are warned that) 72 561.23 T
(     arrays are in row-column order in C. Both the  long  FORTRAN) 72 549.23 T
(     names  and  the shortened six character names are supported.) 72 537.23 T
(     People interested in using  software  text  should  see  the) 72 525.23 T
(     hershey library, HERSHEY\0503\051.) 72 513.23 T
(     Some routines are only available in  VOGL.  If  you  include) 72 489.23 T
(     them  in  programs  it  is  advisable to put #ifdef VOGL ...) 72 477.23 T
(     #endif around them. The constant VOGL is defined whenever  a) 72 465.23 T
(     VOGL header file is included.) 72 453.23 T
(     It should be noted that there are a number of routines  that) 72 429.23 T
(     take the type Angle for some of their parameters. All angles) 72 417.23 T
(     specified this way are actually Integer Tenths  Of  Degrees.) 72 405.23 T
(     \050Don't ask!\051) 72 393.23 T
2 12 Q
(  Include files.) 72 355.9 T
1 10 Q
(     There are two include files provided with vogl:  vogl.h  and) 72 343.23 T
(     vodevice.h.   The  file  vogl.h has the type definitions and) 72 331.23 T
(     function interfaces, ideally it is included where you  would) 72 319.23 T
(     include  gl.h on an SGI. The file vodevice.h has the devices) 72 307.23 T
(     in it, and it is included where you would  include  device.h) 72 295.23 T
(     on an SGI.) 72 283.23 T
(     The following is a brief summary of the VOGL subroutines.) 72 247.23 T
2 12 Q
(  Using X toolkits and Sunview) 72 221.9 T
1 10 Q
(     For X11 and Sunview based applications, it  is  posible  for) 72 209.23 T
(     VOGL  to use a window that is supplied by that application's) 72 197.23 T
(     toolkit.  Under  these  circumstances,  the  toolkit  is  is) 72 185.23 T
(     responsible  for handling of all input events, and VOGL sim-) 72 173.23 T
(     ply draws into the supplied  window.  These calls  are  only) 72 161.23 T
(     available  from  C.  Also  see  the directories examples/xt,) 72 149.23 T
(     examples/xview and examples/sunview.) 72 137.23 T
(     For X based toolkits the following two calls may be used:) 72 113.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    1) 72 53.23 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     vo_xt_window\050display, xwin, width, height\051) 72 721.23 T
(          Tells VOGL to use the supplied window xwin) 72 709.23 T
(               vo_xt_window\050display, xwin, width, height\051) 72 685.23 T
(                    Display   *display;) 72 673.23 T
(                    Window    xwin;) 72 661.23 T
(                    int  width, height;) 72 649.23 T
(          This routine should be called before calling "ginit\050\051".) 72 625.23 T
(     vo_xt_win_size\050width, height\051) 72 601.23 T
(          Tells VOGL that the supplied window has changed size.) 72 589.23 T
(               vo_xt_win_size\050width, height\051) 72 565.23 T
(                    int  width, height;) 72 553.23 T
(For sunview based applications the following  two  calls  may  be) 72 517.23 T
(used:) 72 505.23 T
(     vo_sunview_canvas\050canvas, width, height\051) 72 469.23 T
(          Tells VOGL to use the supplied sunview canvas canvas) 72 457.23 T
(     vo_sunview_canvas\050canvas, width, height\051) 72 433.23 T
(                    Canvas    canvas;) 72 421.23 T
(                    int  width, height;) 72 409.23 T
(          This routine should be called before calling "ginit\050\051".) 72 373.23 T
(     vo_sunview_canvas_size\050width, height\051) 72 337.23 T
(          Tells VOGL that the supplied canvas has changed size.) 72 325.23 T
(               vo_sunview_canvas_size\050width, height\051) 72 301.23 T
(                    int  width, height;) 72 289.23 T
2 12 Q
(  Device routines.) 72 239.9 T
1 10 Q
(     vinit\050device\051) 72 227.23 T
(          Tell VOGL what the device is. This routine needs to  be) 72 215.23 T
(          called  if  the environment variable VDEVICE isn't set,) 72 203.23 T
(          or if the value in VDEVICE is not to be used.) 72 191.23 T
(               Fortran:) 72 167.23 T
(                    subroutine vinit\050device, len\051) 72 155.23 T
(                    character *\050*\051 device) 72 143.23 T
(                    integer len) 72 131.23 T
(               C:) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    2) 72 59.23 T
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    vinit\050device\051;) 72 721.23 T
(                    char     *device;) 72 709.23 T
(               Note 1 :- Current available devices are:) 72 685.23 T
(                        tek - tektronix 4010 and compatibles) 72 673.23 T
(                        hpgl - HP Graphics language and compatibles) 72 661.23 T
(                        dxy - roland DXY plotter language) 72 649.23 T
(                        postscript - monochrome postscript devices) 72 637.23 T
-0.39 (                        ppostscript - monochrome postscript devices \050portrait mode\051) 72 625.23 P
(                        cps - colour postscript devices) 72 613.23 T
(                        pcps - colour postscript devices \050portrait mode\051) 72 601.23 T
(                        grx - the GRX library that is part of DJGPP.) 72 589.23 T
(                              - \050little tested\051) 72 577.23 T
(                        sun - Sun workstations running sunview) 72 565.23 T
(                        X11 - X windows \050SUN's Openwindows etc etc\051) 72 553.23 T
(                        decX11 - the decstation \050old\051 window manager) 72 541.23 T
(                              This is only included in case you need it.) 72 529.23 T
(                        apollo - Apollo workstations) 72 517.23 T
(                        NeXT   - NeXTStep) 72 505.23 T
(                        hercules - IBM PC hercules graphics card) 72 493.23 T
(                        cga - IBM PC cga graphics card) 72 481.23 T
(                        ega - IBM PC ega graphics card) 72 469.23 T
(                        vga - IBM PC vga graphics card) 72 457.23 T
(                        sigma - IBM PC sigma graphics card.) 72 445.23 T
(                        mswin - MS-windoze \050little tested\051.) 72 433.23 T
(                        Sun, X11, decX11, apollo, hercules, cga) 72 409.23 T
(                        and ega support double buffering.) 72 397.23 T
(               Note 2 :- If device is a NULL or a null string the value) 72 337.23 T
(                    of the environment variable "VDEVICE" is taken as the) 72 325.23 T
(                    device type to be opened.) 72 313.23 T
(               Note 3 :- after init it is wise to explicitly) 72 289.23 T
(                    clear the screen.) 72 277.23 T
(               e.g.: in C) 72 253.23 T
(                    color\050BLACK\051;) 72 241.23 T
(                    clear\050\051;) 72 229.23 T
(               or    in Fortran) 72 205.23 T
(                    call color\050BLACK\051) 72 193.23 T
(                    call clear) 72 181.23 T
(     ginit\050\051) 72 145.23 T
(          Open the graphics device and do the  basic  initialisa-) 72 133.23 T
(          tion. This routine is marked for obsolescence. The rou-) 72 121.23 T
(          tine winopen \050see below\051 should be used instead.  Note:) 72 109.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    3) 72 61.23 T
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(          this  automatically  causes a REDRAW event to appear as) 72 721.23 T
(          the first event in the event queue.) 72 709.23 T
(               Fortran:) 72 685.23 T
(                    subroutine ginit) 72 673.23 T
(               C:) 72 649.23 T
(                    ginit\050\051) 72 637.23 T
(     winopen\050title\051) 72 601.23 T
(          Open the graphics device and do the  basic  initialisa-) 72 589.23 T
(          tion.  This  routine  should  be used instead of ginit.) 72 577.23 T
(          Note: this  automatically  causes  a  REDRAW  event  to) 72 565.23 T
(          appear as the first event in the event queue.) 72 553.23 T
(               Fortran:) 72 529.23 T
(                    subroutine winopen\050title, len\051) 72 517.23 T
(                    character*\050*\051 title) 72 505.23 T
(                    integer len) 72 493.23 T
(               C:) 72 469.23 T
(                    winopen\050title\051) 72 457.23 T
(                         char *title;) 72 445.23 T
(     gexit\050\051) 72 409.23 T
(          Reset the window/terminal \050must be the last  VOGL  rou-) 72 397.23 T
(          tine called\051) 72 385.23 T
(               Fortran:) 72 361.23 T
(                    subroutine gexit) 72 349.23 T
(               C:) 72 325.23 T
(                    gexit\050\051) 72 313.23 T
(     voutput\050path\051) 72 277.23 T
(          Redirect output from *next*  ginit  to  file  given  by) 72 265.23 T
(          path. This routine only applies to devices drivers that) 72 253.23 T
(          write to stdout e.g. postscript and hpgl.) 72 241.23 T
(               Fortran:) 72 217.23 T
(                    subroutine voutput\050path, len\051) 72 205.23 T
(                    character*\050*\051 path) 72 193.23 T
(                    integer len) 72 181.23 T
(               C:) 72 157.23 T
(                    voutput\050path\051) 72 145.23 T
(                         char *path;) 72 133.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    4) 72 61.23 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     vnewdev\050device\051) 72 721.23 T
(          Reinitialize VOGL to use a new device without  changing) 72 709.23 T
(          attributes,  viewport  etc.   \050eg.  window and viewport) 72 697.23 T
(          specifications\051) 72 685.23 T
(               Fortran:) 72 661.23 T
(                    subroutine vnewdev\050device, len\051) 72 649.23 T
(                    character *\050*\051 device) 72 637.23 T
(                    integer len) 72 625.23 T
(               C:) 72 601.23 T
(                    vnewdev\050device\051) 72 589.23 T
(                         char *device;) 72 577.23 T
(          getplanes\050\051 Returns the number of bit planes \050or  color) 72 553.23 T
(          planes\051  for  a particular device. The number of colors) 72 541.23 T
(          displayable by the device is then 2**\050nplanes-1\051) 72 529.23 T
(               Fortran:) 72 505.23 T
(                    integer function  getplanes\050\051) 72 493.23 T
(               C:) 72 469.23 T
(                    long) 72 457.23 T
(                    getplanes\050\051) 72 445.23 T
2 12 Q
(  Routines for controlling flushing or syncronisation) 72 407.9 T
1 10 Q
(     On some devices \050particularly X11\051 considerable speedups  in) 72 395.23 T
(     display can be achieved by not flushing each graphics primi-) 72 383.23 T
(     tive call  to  the  actual  display  until  necessary.  VOGL) 72 371.23 T
(     automatically delays flushing under in following cases:) 72 359.23 T
(          - Within a callobj\050\051 call.) 72 335.23 T
(          - Within curves and patches.) 72 323.23 T
(          - Within bgn*/end* calls.) 72 311.23 T
(          - When double buffering \050the flush is only done withing swapbuffers\051.) 72 299.23 T
(     There are two user routines \050which are  NOT  GL  compatible\051) 72 275.23 T
(     that can be used to control flushing.) 72 263.23 T
(     vsetflush\050yesno\051) 72 239.23 T
(          Set global flushing status. If yesno = 0 \050.false.\051 then) 72 227.23 T
(          don't  do  any  flushing  \050except  in swapbuffers\050\051, or) 72 215.23 T
(          vflush\050\051\051. If yesno = 1 \050.true.\051 then do  the  flushing) 72 203.23 T
(          as described above.) 72 191.23 T
(               Fortran:) 72 167.23 T
(                    subroutine vsetflush\050yesno\051) 72 155.23 T
(                    logical yesno) 72 143.23 T
(               C:) 72 119.23 T
(                    void) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    5) 72 59.23 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    vsetflush\050yesno\051) 72 721.23 T
(                         int  yesno;) 72 709.23 T
(     vflush\050\051) 72 685.23 T
(          Call the device flush or syncronisation  routine.  This) 72 673.23 T
(          forces a flush.) 72 661.23 T
(               Fortran:) 72 637.23 T
(                    subroutine vflush) 72 625.23 T
(               C:) 72 601.23 T
(                    void) 72 589.23 T
(                    vflush\050\051;) 72 577.23 T
2 12 Q
(  Routines For Setting Up Windows.) 72 551.9 T
1 10 Q
(     Some devices are basically window orientated - like  sunview) 72 539.23 T
(     and X11. You can give VOGL some information about the window) 72 527.23 T
(     that it will use with these routines.  These can  make  your) 72 515.23 T
(     code  very  device  dependent.  Both routines take arguments) 72 503.23 T
(     which are in device space. \0500, 0\051 is the  bottom  left  hand) 72 491.23 T
(     corner  in  device  space. To have any effect these routines) 72 479.23 T
(     must be called before ginit or winopen.  For the X11 device,) 72 467.23 T
(     an  entry  may  be  made in your .Xdefaults file of the form) 72 455.23 T
(     vogl.Geometry  =150x500+550+50  \050where  you   specify   your) 72 443.23 T
(     geometry as you please\051.) 72 431.23 T
(     prefposition\050x1, x2, y1, y2\051) 72 407.23 T
(          Specify the preferred position of the window opened  by) 72 395.23 T
(          the *next* winopen.) 72 383.23 T
(               Fortran:) 72 359.23 T
(                    subroutine prefposition\050x1, x2, y1, y2\051) 72 347.23 T
(                    integer x1, x2, y1, y2) 72 335.23 T
(               C:) 72 311.23 T
(                    prefposition\050x1, x2, y1, y2\051) 72 299.23 T
(                         long x1, x2, y1, y2) 72 287.23 T
(     prefsize\050width, height\051) 72 251.23 T
(          Specify the preferred width and height  of  the  window) 72 239.23 T
(          opened by the *next* winopen.) 72 227.23 T
(               Fortran:) 72 203.23 T
(                    subroutine prefsize\050width, height\051) 72 191.23 T
(                    integer width, height) 72 179.23 T
(               C:) 72 155.23 T
(                    prefsize\050width, height\051) 72 143.23 T
(                         long width, height;) 72 131.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    6) 72 59.23 T
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     reshapeviewport) 72 721.23 T
(          This is occasionally used in Iris GL if a REDRAW  event) 72 709.23 T
(          rolls  up.  While  VOGL  is  unlikely to ever provide a) 72 697.23 T
(          REDRAW event \050except possibly the first  event  in  the) 72 685.23 T
(          event queue\051 the call is provided for compatibility.) 72 673.23 T
(               Fortran:) 72 649.23 T
(                    subroutine reshap) 72 637.23 T
(               C:) 72 613.23 T
(                    reshapeviewport\050\051) 72 601.23 T
2 12 Q
(  General Routines.) 72 563.9 T
1 10 Q
(     clear\050\051) 72 551.23 T
(          Clears the current viewport to the current colour.) 72 539.23 T
(               Fortran:) 72 515.23 T
(                    subroutine clear) 72 503.23 T
(               C:) 72 479.23 T
(                    clear\050\051) 72 467.23 T
(     color\050col\051) 72 431.23 T
(          Set the current colour. The  standard  colours  are  as) 72 419.23 T
(          follows:) 72 407.23 T
(               black = 0       red = 1         green = 2       yellow = 3) 72 395.23 T
(               blue = 4        magenta = 5     cyan = 6        white = 7.) 72 383.23 T
(               These are included in vogl.h as:) 72 359.23 T
(                  BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN and WHITE.) 72 335.23 T
(               When using fortran these are included in fvogl.h as) 72 311.23 T
(                  BLACK, RED, GREEN, YELLOW, BLUE, MAGENT, CYAN and WHITE.) 72 299.23 T
(               Fortran:) 72 275.23 T
(                    subroutine color\050col\051) 72 263.23 T
(                    integer col) 72 251.23 T
(               C:) 72 227.23 T
(                    color\050col\051) 72 215.23 T
(                         Colorindex     col;) 72 203.23 T
(     colorf\050col\051) 72 167.23 T
(          Same as color only it takes a floating point  argument.) 72 155.23 T
(          In  Iris  GL there are sometimes good reasons for using) 72 143.23 T
(          this routine over color. See the  GL  manual  for  more) 72 131.23 T
(          details.) 72 119.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    7) 72 59.23 T
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(               Fortran:) 72 721.23 T
(                    subroutine colorf\050col\051) 72 709.23 T
(                    real col) 72 697.23 T
(               C:) 72 673.23 T
(                    colorf\050col\051) 72 661.23 T
(                         float     col;) 72 649.23 T
(     mapcolor\050indx, red, green, blue\051) 72 613.23 T
(          Set the color map index indx to the  color  represented) 72 601.23 T
(          by  \050red, green, blue\051.  If the device has no color map) 72 589.23 T
(          this call does nothing.) 72 577.23 T
(               Fortran:) 72 553.23 T
(                    subroutine mapcolor\050indx, red, green, blue\051) 72 541.23 T
(                    integer indx, red, green, blue) 72 529.23 T
(               C:) 72 505.23 T
(                    mapcolor\050indx, red, green, blue\051) 72 493.23 T
(                         Colorindex     indx;) 72 481.23 T
(                         short          red, green, blue;) 72 469.23 T
(     defbasis\050id, mat\051) 72 433.23 T
(          Define basis number id to be the matrix mat.) 72 421.23 T
(               Fortran:) 72 397.23 T
(                    subroutine defbasis\050id, mat\051) 72 385.23 T
(                    integer id) 72 373.23 T
(                    real mat\0504, 4\051) 72 361.23 T
(               C:) 72 337.23 T
(                    defbasis\050id, mat\051) 72 325.23 T
(                         short     id;) 72 313.23 T
(                         Matrix    mat;) 72 301.23 T
(     polymode\050mode\051) 72 265.23 T
(          NOTE:- For this call to have any effect  it  must  have) 72 253.23 T
(          been  conditionally  compilied  into  the library. \050See) 72 241.23 T
(          polygons.c  for  details\051  Control   the   filling   of) 72 229.23 T
(          polygons.  It  expects  one  of the following PYM_LINE,) 72 217.23 T
(          which means only the edges of the polygon will be drawn) 72 205.23 T
(          and   PYM_FILL   which  means  fill  the  polygon  \050the) 72 193.23 T
(          default\051. PYM_POINT and PYM_HOLLOW are also  recognised) 72 181.23 T
(          but they don't behave quite as they would with SGI GL.) 72 169.23 T
(          Also note that in Fortran the  corresponding  constants) 72 145.23 T
(          are  truncated  to  PYM_LI,  PYM_FI,  PYM_PO and PYM_HO) 72 133.23 T
(          respectivly. These appear in fvogl.h.) 72 121.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    8) 72 61.23 T
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(               Fortran:) 72 721.23 T
(                    subroutine polymode\050mode\051) 72 709.23 T
(                    integer mode) 72 697.23 T
(               C:) 72 673.23 T
(                    polymode\050mode\051) 72 661.23 T
(                         long mode;) 72 649.23 T
2 12 Q
(  The Device Queue and Valuator Routines.) 72 611.9 T
1 10 Q
(     The available  devices  are  defined  in  the  header  files) 72 599.23 T
(     vodevice.h and for FORTRAN fvodevice.h) 72 587.23 T
(     qdevice\050dev\051) 72 563.23 T
(          Enable a device. Note: in VOGL the queue is  of  length) 72 551.23 T
(          1.) 72 539.23 T
(               Fortran:) 72 515.23 T
(                    subroutine qdevice\050dev\051) 72 503.23 T
(                    integer dev) 72 491.23 T
(               C:) 72 467.23 T
(                    qdevice\050dev\051) 72 455.23 T
(                         Device    dev;) 72 443.23 T
(     unqdevice\050dev\051) 72 407.23 T
(          Disable a device.) 72 395.23 T
(               Fortran:) 72 371.23 T
(                    subroutine qdevice\050dev\051) 72 359.23 T
(                    integer dev) 72 347.23 T
(               C:) 72 323.23 T
(                    qdevice\050dev\051) 72 311.23 T
(                         Device    dev;) 72 299.23 T
(     qread\050data\051) 72 263.23 T
(          Read an event from  the  device  queue.  This  routines) 72 251.23 T
(          blocks  until  something happens. Note: it is important) 72 239.23 T
(          to have called qdevice before doing this.) 72 227.23 T
(               Fortran:) 72 203.23 T
(                    integer function qread\050data\051) 72 191.23 T
(                    integer*2 data) 72 179.23 T
(               C:) 72 155.23 T
(                    long qread\050data\051) 72 143.23 T
(                         short     *data;) 72 131.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                    9) 72 59.23 T
FMENDPAGE
%%EndPage: "14" 15
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     isqueued\050dev\051) 72 721.23 T
(          Check to see if device dev is enabled for queueing.) 72 709.23 T
(               Fortran:) 72 685.23 T
(                    logical function isqueued\050dev\051) 72 673.23 T
(                    integer dev) 72 661.23 T
(               C:) 72 637.23 T
(                    Boolean isqueued\050dev\051) 72 625.23 T
(                         short     *dev;) 72 613.23 T
(     qtest\050\051) 72 577.23 T
(          Check if there is anything in the queue. Note: in  VOGL) 72 565.23 T
(          the queue is only 1 entry deep.) 72 553.23 T
(               Fortran:) 72 529.23 T
(                    logical function qtest) 72 517.23 T
(               C:) 72 493.23 T
(                    Boolean qtest\050\051) 72 481.23 T
(     qreset\050\051) 72 445.23 T
(          Reset the device queue. This will get rid of any  pend-) 72 433.23 T
(          ing events.) 72 421.23 T
(               Fortran:) 72 397.23 T
(                    subroutine qreset) 72 385.23 T
(               C:) 72 361.23 T
(                    qreset\050\051) 72 349.23 T
(     getbutton\050dev\051) 72 313.23 T
(          Returns the up \0500\051 or down \0501\051 state of a button.) 72 301.23 T
(               Fortran:) 72 277.23 T
(                    logical function getbutton\050dev\051) 72 265.23 T
(                    integer dev) 72 253.23 T
(               C:) 72 229.23 T
(                    Boolean getbutton\050dev\051) 72 217.23 T
(                         Device    dev;) 72 205.23 T
(     getvaluator\050dev\051) 72 169.23 T
(          Return the current value of the valuator. Currently the) 72 157.23 T
(          only valuators supported are MOUSEX and MOUSEY.) 72 145.23 T
(               Fortran:) 72 121.23 T
(                    integer function getvaluator\050dev\051) 72 109.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   10) 72 61.23 T
FMENDPAGE
%%EndPage: "15" 16
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    integer dev) 72 721.23 T
(               C:) 72 697.23 T
(                    long getvaluator\050dev\051) 72 685.23 T
(                         Device    dev;) 72 673.23 T
2 12 Q
(  Viewport Routines.) 72 635.9 T
1 10 Q
(     viewport\050left, right, bottom, top\051) 72 623.23 T
(          Specify which part of the  screen  to  draw  in.  Left,) 72 611.23 T
(          right,  bottom,  and  top  are integer values in screen) 72 599.23 T
(          coordinates.) 72 587.23 T
(               Fortran:) 72 563.23 T
(                    subroutine viewport\050left, right, bottom, top\051) 72 551.23 T
(                    integer left, right, bottom, top) 72 539.23 T
(               C:) 72 515.23 T
(                    viewport\050left, right, bottom, top\051) 72 503.23 T
(                         Screencoord      left, right, bottom, top;) 72 491.23 T
(     pushviewport\050\051) 72 455.23 T
(          Save current viewport on the viewport stack.) 72 443.23 T
(               Fortran:) 72 419.23 T
(                    subroutine pushviewport) 72 407.23 T
(               C:) 72 383.23 T
(                    pushviewport\050\051) 72 371.23 T
(     popviewport\050\051) 72 335.23 T
(          Retrieve last pushed viewport.) 72 323.23 T
(               Fortran:) 72 299.23 T
(                    subroutine popviewport) 72 287.23 T
(               C:) 72 263.23 T
(                    popviewport\050\051) 72 251.23 T
(     getviewport\050left, right, bottom, top\051) 72 215.23 T
(          Returns the left, right, bottom and top limits  of  the) 72 203.23 T
(          current viewport in screen coordinates.) 72 191.23 T
(               Fortran:) 72 167.23 T
(                    subroutine getviewport\050left, right, bottom, top\051) 72 155.23 T
(                    integer*2 left, right, bottom, top) 72 143.23 T
(               C:) 72 119.23 T
(                    getviewport\050left, right, bottom, top\051) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   11) 72 59.23 T
FMENDPAGE
%%EndPage: "16" 17
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                         Screencoord      *left, *right, *bottom, *top;) 72 721.23 T
2 12 Q
(  Attribute Stack Routines.) 72 683.9 T
1 10 Q
(     The attribute stack contains details such as current  color,) 72 671.23 T
(     current  line  style and width, and the current font number.) 72 659.23 T
(     If you need to prevent object calls form changing these, use) 72 647.23 T
(     pushattributes before the call and popattributes after.) 72 635.23 T
(     pushattributes\050\051) 72 611.23 T
(          Save the current attributes on the attribute stack.) 72 599.23 T
(               Fortran:) 72 575.23 T
(                    subroutine pushattributes) 72 563.23 T
(               C:) 72 539.23 T
(                    pushattributes\050\051) 72 527.23 T
(     popattributes\050\051) 72 503.23 T
(          Restore the attributes to what they were  at  the  last) 72 491.23 T
(          pushattribute\050\051.) 72 479.23 T
(               Fortran:) 72 455.23 T
(                    subroutine popattributes) 72 443.23 T
(               C:) 72 419.23 T
(                    popattributes\050\051) 72 407.23 T
2 12 Q
(  Projection Routines.) 72 369.9 T
1 10 Q
(     All the projection  routines  define  a  new  transformation) 72 357.23 T
(     matrix,  and  consequently the world units. Parallel projec-) 72 345.23 T
(     tions are defined by ortho or  ortho2.  Perspective  projec-) 72 333.23 T
(     tions  can  be  defined by perspective and window.  Note the) 72 321.23 T
(     types Angle, etc, are defined in vogl.h. Remember angles are) 72 309.23 T
(     in tenths of degrees.) 72 297.23 T
(     ortho\050left, right, bottom, top, near, far\051) 72 273.23 T
(          Define x \050left, right\051, y \050bottom, top\051, and  z  \050near,) 72 261.23 T
(          far\051  clipping planes. The near and far clipping planes) 72 249.23 T
(          are actually specified as distances along the  line  of) 72 237.23 T
(          sight.  These  distances  can  also  be  negative.  The) 72 225.23 T
(          actual location of the clipping planes is z  =  -near_d) 72 213.23 T
(          and z = -far_d.) 72 201.23 T
(               Fortran:) 72 177.23 T
(                    subroutine ortho\050left, right, bottom, top, near_d, far_d\051) 72 165.23 T
(                    real left, right, bottom, top, near_d, far_d) 72 153.23 T
(               C:) 72 129.23 T
(                    ortho\050left, right, bottom, top, near_d, far_d\051) 72 117.23 T
(                         Coord     left, right, bottom, top, near_d, far_d;) 72 105.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   12) 72 57.23 T
FMENDPAGE
%%EndPage: "17" 18
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     ortho2\050left, right, bottom, top\051) 72 721.23 T
(          Define x \050left, right\051, and y  \050bottom,  top\051  clipping) 72 709.23 T
(          planes.) 72 697.23 T
(               Fortran:) 72 673.23 T
(                    subroutine ortho2\050left, right, bottom, top\051) 72 661.23 T
(                    real left, right, bottom, top) 72 649.23 T
(               C:) 72 625.23 T
(                    ortho2\050left, right, bottom, top\051) 72 613.23 T
(                         float     left, right, bottom, top;) 72 601.23 T
(     perspective\050fov, aspect, near, far\051) 72 565.23 T
(          Specify a perspective viewing pyramid in world  coordi-) 72 553.23 T
(          nates  by  giving a field of view, aspect ratio and the) 72 541.23 T
(          distance from the eye of  the  near  and  far  clipping) 72 529.23 T
(          plane.) 72 517.23 T
(               Fortran:) 72 493.23 T
(                    subroutine perspective\050fov, aspect, near, far\051) 72 481.23 T
(                    integer fov) 72 469.23 T
(                    real aspect, near, far) 72 457.23 T
(               C:) 72 433.23 T
(                    perspective\050fov, aspect, near, far\051) 72 421.23 T
(                         Angle     fov;) 72 409.23 T
(                         float     aspect;) 72 397.23 T
(                         Coord     near, far;) 72 385.23 T
(     window\050left, right, bot, top, near, far\051) 72 349.23 T
(          Specify a perspective viewing pyramid in world coordinates by) 72 337.23 T
(          giving the rectangle closest to the eye \050ie. at the near clipping) 72 325.23 T
(          plane\051 and the distances to the near and far clipping planes.) 72 313.23 T
(               Fortran:) 72 289.23 T
(                    subroutine window\050left, right, bot, top, near, far\051) 72 277.23 T
(                    real left, right, bot, top, near, far) 72 265.23 T
(               C:) 72 241.23 T
(                    window\050left, right, bot, top, near, far\051) 72 229.23 T
(                         float     left, right, bot, top, near, far;) 72 217.23 T
2 12 Q
(  Matrix Stack Routines.) 72 179.9 T
1 10 Q
(     pushmatrix\050\051) 72 167.23 T
(          Save the current transformation matrix  on  the  matrix) 72 155.23 T
(          stack.) 72 143.23 T
(               Fortran:) 72 119.23 T
(                    subroutine pushmatrix) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   13) 72 59.23 T
FMENDPAGE
%%EndPage: "18" 19
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(               C:) 72 721.23 T
(                    pushmatrix\050\051) 72 709.23 T
(     popmatrix\050\051) 72 673.23 T
(          Retrieve the last matrix pushed and make it the current) 72 661.23 T
(          transformation matrix.) 72 649.23 T
(               Fortran:) 72 625.23 T
(                    subroutine popmatrix) 72 613.23 T
(               C:) 72 589.23 T
(                    popmatrix\050\051) 72 577.23 T
2 12 Q
(  Viewpoint Routines.) 72 539.9 T
1 10 Q
(     Viewpoint routines alter the current tranformation matrix.) 72 527.23 T
(     polarview\050dist, azim, inc, twist\051) 72 503.23 T
(          Specify the viewer's position in polar  coordinates  by) 72 491.23 T
(          giving  the  distance  from  the viewpoint to the world) 72 479.23 T
(          origin, the azimuthal angle in the x-y plane,  measured) 72 467.23 T
(          from  the y-axis, the incidence angle in the y-z plane,) 72 455.23 T
(          measured from the z-axis, and the twist angle about the) 72 443.23 T
(          line of sight.) 72 431.23 T
(               Fortran:) 72 407.23 T
(                    subroutine polarview\050dist, azim, inc, twist\051) 72 395.23 T
(                    real dist) 72 383.23 T
(                    integer azim, inc, twist) 72 371.23 T
(               C:) 72 347.23 T
(                    polarview\050dist, azim, inc, twist\051) 72 335.23 T
(                         Coord     dist;) 72 323.23 T
(                         Angle     azim, inc, twist;) 72 311.23 T
(     lookat\050vx, vy, vz, px, py, pz, twist\051) 72 275.23 T
(          Specify the viewer's position by giving a viewpoint and) 72 263.23 T
(          a  reference  point in world coordinates. A twist about) 72 251.23 T
(          the line of sight may also be given.) 72 239.23 T
(               Fortran:) 72 215.23 T
(                    subroutine lookat\050vx, vy, vz, px, py, pz, twist\051) 72 203.23 T
(                    real vx, vy, vz, px, py, pz) 72 191.23 T
(                    integer twist) 72 179.23 T
(               C:) 72 155.23 T
(                    lookat\050vx, vy, vz, px, py, pz, twist\051) 72 143.23 T
(                         float     vx, vy, vz, px, py, pz;) 72 131.23 T
(                         Angle     twist;) 72 119.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   14) 72 59.23 T
FMENDPAGE
%%EndPage: "19" 20
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
2 12 Q
(  Move Routines.) 72 719.9 T
1 10 Q
(     There are variations on all these routines that end  in  's') 72 707.23 T
(     and  also end in 'i'. In the case of the 's' variations they) 72 695.23 T
(     take arguments of type Scoord in C and integer*2 in FORTRAN.) 72 683.23 T
(     In  the  case  of  the 'i' variations they take arguments of) 72 671.23 T
(     type Icoord in C and integer in FORTRAN.) 72 659.23 T
(     move\050x, y, z\051) 72 635.23 T
(          Move current graphics position to \050x, y, z\051. \050x, y,  z\051) 72 623.23 T
(          is a point in world coordinates.) 72 611.23 T
(               Fortran:) 72 587.23 T
(                    subroutine move\050x, y, z\051) 72 575.23 T
(                    real x, y, z) 72 563.23 T
(               C:) 72 539.23 T
(                    move\050x, y, z\051) 72 527.23 T
(                         Coord     x, y, z;) 72 515.23 T
(     rmv\050deltax, deltay, deltaz\051) 72 479.23 T
(          Relative move. deltax, deltay, and deltaz  are  offsets) 72 467.23 T
(          in world units.) 72 455.23 T
(               Fortran:) 72 431.23 T
(                    subroutine rmv\050deltax, deltay, deltaz\051) 72 419.23 T
(                    real deltax, deltay, deltaz) 72 407.23 T
(               C:) 72 383.23 T
(                    rmv\050deltax, deltay, deltaz\051) 72 371.23 T
(                         Coord   deltax, deltay, deltaz;) 72 359.23 T
(     move2\050x, y\051) 72 323.23 T
(          Move graphics position to point \050x, y\051.  \050x,  y\051  is  a) 72 311.23 T
(          point in world coordinates.) 72 299.23 T
(               Fortran:) 72 275.23 T
(                    subroutine move2\050x, y\051) 72 263.23 T
(                    real x, y) 72 251.23 T
(               C:) 72 227.23 T
(                    move2\050x, y\051) 72 215.23 T
(                         Coord     x, y;) 72 203.23 T
(     rmv2\050deltax, deltay\051) 72 167.23 T
(          Relative move2. deltax and deltay are offsets in  world) 72 155.23 T
(          units.) 72 143.23 T
(               Fortran:) 72 119.23 T
(                    subroutine rmv2\050deltax, deltay\051) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   15) 72 59.23 T
FMENDPAGE
%%EndPage: "20" 21
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    real deltax, deltay) 72 721.23 T
(               C:) 72 697.23 T
(                    rmv2\050deltax, deltay\051) 72 685.23 T
(                         Coord     deltax, deltay;) 72 673.23 T
2 12 Q
(  Line routines.) 72 623.9 T
1 10 Q
(     These  routines set the line style and  line  width  if  the) 72 611.23 T
(     current device is capable of doing so.) 72 599.23 T
(     deflinestyle\050n, style\051) 72 575.23 T
(          Define a line style and binds it to the integer n.  The) 72 563.23 T
(          line style is a bit pattern of 16 bits width.) 72 551.23 T
(               Fortran:) 72 539.23 T
(                    subroutine deflin\050n, style\051) 72 527.23 T
(                    integer   n) 72 515.23 T
(                    integer style) 72 503.23 T
(               C:) 72 479.23 T
(                    deflinestyle\050n, style\051) 72 467.23 T
(                         short     n;) 72 455.23 T
(                         Linestyle style;) 72 443.23 T
(     setlinestyle\050n\051) 72 395.23 T
(          Sets the current line style.) 72 383.23 T
(               Fortran:) 72 371.23 T
(                    subroutine setlin\050n\051) 72 359.23 T
(                    integer   n) 72 347.23 T
(               C:) 72 323.23 T
(                    setlinestyle\050n\051) 72 311.23 T
(                         short     n;) 72 299.23 T
(     linewidth\050n\051) 72 251.23 T
(          Sets the current line width to 'n' pixels wide.) 72 239.23 T
(               Fortran:) 72 227.23 T
(                    subroutine linewi\050n\051) 72 215.23 T
(                    integer   n) 72 203.23 T
(               C:) 72 179.23 T
(                    linewidth\050n\051) 72 167.23 T
(                         short     n;) 72 155.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   16) 72 59.23 T
FMENDPAGE
%%EndPage: "21" 22
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
2 12 Q
(  Drawing Routines.) 72 719.9 T
1 10 Q
(     There are variations on all these routines that end  in  's') 72 707.23 T
(     and  also end in 'i'. In the case of the 's' variations they) 72 695.23 T
(     take arguments of type Scoord in C and integer*2 in FORTRAN.) 72 683.23 T
(     In  the  case  of  the 'i' variations they take arguments of) 72 671.23 T
(     type Icoord in C and integer in FORTRAN.) 72 659.23 T
(     draw\050x, y, z\051) 72 635.23 T
(          Draw from current graphics position to \050x, y,  z\051.  \050x,) 72 623.23 T
(          y, z\051 is a point in world coordinates.) 72 611.23 T
(               Fortran:) 72 587.23 T
(                    subroutine draw\050x, y, z\051) 72 575.23 T
(                    real x, y, z) 72 563.23 T
(               C:) 72 539.23 T
(                    draw\050x, y, z\051) 72 527.23 T
(                         Coord     x, y, z;) 72 515.23 T
(     rdr\050deltax, deltay, deltaz\051) 72 479.23 T
(          Relative draw. deltax, deltay, and deltaz  are  offsets) 72 467.23 T
(          in world units.) 72 455.23 T
(               Fortran:) 72 431.23 T
(                    subroutine rdr\050deltax, deltay, deltaz\051) 72 419.23 T
(                    real deltax, deltay, deltaz) 72 407.23 T
(               C:) 72 383.23 T
(                    rdr\050deltax, deltay, deltaz\051) 72 371.23 T
(                         Coord   deltax, deltay, deltaz;) 72 359.23 T
(     draw2\050x, y\051) 72 323.23 T
(          Draw from current graphics position to  point  \050x,  y\051.) 72 311.23 T
(          \050x, y\051 is a point in world coordinates.) 72 299.23 T
(               Fortran:) 72 275.23 T
(                    subroutine draw2\050x, y\051) 72 263.23 T
(                    real x, y) 72 251.23 T
(               C:) 72 227.23 T
(                    draw2\050x, y\051) 72 215.23 T
(                         Coord     x, y;) 72 203.23 T
(     rdr2\050deltax, deltay\051) 72 167.23 T
(          Relative draw2. deltax and deltay are offsets in  world) 72 155.23 T
(          units.) 72 143.23 T
(               Fortran:) 72 119.23 T
(                    subroutine rdr2\050deltax, deltay\051) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   17) 72 59.23 T
FMENDPAGE
%%EndPage: "22" 23
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    real deltax, deltay) 72 721.23 T
(               C:) 72 697.23 T
(                    rdr2\050deltax, deltay\051) 72 685.23 T
(                         Coord   deltax, deltay;) 72 673.23 T
2 12 Q
(  Vertex calls.) 72 623.9 T
1 10 Q
(     There are calls which we term 'vertex  calls'  which  simply) 72 611.23 T
(     specify  a  point in 4D, 3D or 2D. These calls take an array) 72 599.23 T
(     which specifies the coordinates of the point. The  interpre-) 72 587.23 T
(     tation of these points is described below.) 72 575.23 T
(     v4d\050v\051 Specify a vertex\050point\051 in 4D using double  precision) 72 551.23 T
(     numbers.) 72 539.23 T
(          Fortran:) 72 515.23 T
(               subroutine v4d\050v\051) 72 503.23 T
(               real *8 v\0504\051) 72 491.23 T
(          C:) 72 467.23 T
(               v4d\050v\051) 72 455.23 T
(                    double v[4];) 72 443.23 T
(     v4f\050v\051 Specify a vertex\050point\051 in 4D using single  precision) 72 407.23 T
(     floating point numbers.) 72 395.23 T
(          Fortran:) 72 371.23 T
(               subroutine v4f\050v\051) 72 359.23 T
(               real v\0504\051) 72 347.23 T
(          C:) 72 323.23 T
(               v4f\050v\051) 72 311.23 T
(                    float v[4];) 72 299.23 T
(     v4i\050v\051 Specify a vertex\050point\051 in 4D using integer numbers) 72 263.23 T
(          Fortran:) 72 239.23 T
(               subroutine v4i\050v\051) 72 227.23 T
(               integer v\0504\051) 72 215.23 T
(          C:) 72 191.23 T
(               v4i\050v\051) 72 179.23 T
(                    long v[4];) 72 167.23 T
(     v4s\050v\051 Specify a vertex\050point\051 in  4D  using  short  integer) 72 131.23 T
(     numbers) 72 119.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   18) 72 59.23 T
FMENDPAGE
%%EndPage: "23" 24
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(          Fortran:) 72 721.23 T
(               subroutine v4s\050v\051) 72 709.23 T
(               integer *2  v\0504\051) 72 697.23 T
(          C:) 72 673.23 T
(               v4s\050v\051) 72 661.23 T
(                    short v[4];) 72 649.23 T
(     There are also equivalent calls for  3D  points  \050v3d,  v3f,) 72 589.23 T
(     v3i,  v3s\051  and  2D  points  \050v2d,  v2f, v2i, v2s\051. The only) 72 577.23 T
(     difference is the number of elements that each vertex  needs) 72 565.23 T
(     to  be  specified. It should also be noted the the different) 72 553.23 T
(     data types \050ie. double, float, long and  short\051  are  merely) 72 541.23 T
(     different  ways  of  representing  the same basic coordinate) 72 529.23 T
(     data \050calling v3s with v[] = {100,200,200} is  the  same  as) 72 517.23 T
(     calling v3f with v[] = {100.0, 200.0, 200.0}\051.) 72 505.23 T
(     The way these points are interpreted depends  on  what  mode) 72 481.23 T
(     has  be  set  up  with  one  of the calls bgnpoint, bgnline,) 72 469.23 T
(     bgnclosedline or bgnpolygon.  The  bgnpoint  call  specifies) 72 457.23 T
(     that  the next series of vertex calls are specifying a chain) 72 445.23 T
(     of points \050dots\051 to be drawn. A bgnpoint is terminated  with) 72 433.23 T
(     a endpoint call.) 72 421.23 T
(          Fortran:) 72 397.23 T
(               subroutine bgnpoint) 72 385.23 T
(          C:) 72 361.23 T
(               bgnpoint\050\051) 72 349.23 T
(          Fortran:) 72 325.23 T
(               subroutine endpoint) 72 313.23 T
(          C:) 72 289.23 T
(               endpoint\050\051) 72 277.23 T
(     The bgnline call specifies that the next  series  of  vertex) 72 229.23 T
(     calls are specifying the points on a polyline. A bgnline) 72 217.23 T
(      is terminated with a endline call.) 72 205.23 T
(          Fortran:) 72 181.23 T
(               subroutine bgnline) 72 169.23 T
(          C:) 72 145.23 T
(               bgnline\050\051) 72 133.23 T
(          Fortran:) 72 109.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   19) 72 61.23 T
FMENDPAGE
%%EndPage: "24" 25
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(               subroutine endline) 72 721.23 T
(          C:) 72 697.23 T
(               endline\050\051) 72 685.23 T
(     The bgnclosedline call is similar to the bgnline except that) 72 637.23 T
(     when  endclosedline is called the first point given \050ie. the) 72 625.23 T
(     one first after the bgnclosedline call\051  is  joined  to  the) 72 613.23 T
(     last  point given \050ie. the one just before the endclosedline) 72 601.23 T
(     call\051.) 72 589.23 T
(          Fortran:) 72 565.23 T
(               subroutine bgncloseline) 72 553.23 T
(          C:) 72 529.23 T
(               bgnclosedline\050\051) 72 517.23 T
(          Fortran:) 72 493.23 T
(               subroutine endclosedline) 72 481.23 T
(          C:) 72 457.23 T
(               endclosedline\050\051) 72 445.23 T
(     The bgnpolygon call specifies that the next series of vertex) 72 397.23 T
(     calls  are  defining  a polygon.  When endpolygon is called,) 72 385.23 T
(     the polygon is closed and filled \050or  drawn  as  an  outline) 72 373.23 T
(     depending  on  the  mode that has been set with the polymode) 72 361.23 T
(     call if this call has been compilied into the library.) 72 349.23 T
(          Fortran:) 72 313.23 T
(               subroutine bgnpolygon) 72 301.23 T
(          C:) 72 277.23 T
(               bgnpolygon\050\051) 72 265.23 T
(          Fortran:) 72 241.23 T
(               subroutine endpolygon) 72 229.23 T
(          C:) 72 205.23 T
(               endpolygon\050\051) 72 193.23 T
2 12 Q
(  Arcs and Circles.) 72 131.9 T
1 10 Q
(     There are variations on all these routines that end  in  's') 72 119.23 T
(     and  also end in 'i'. In the case of the 's' variations they) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   20) 72 59.23 T
FMENDPAGE
%%EndPage: "25" 26
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     take arguments of type Scoord in C and integer*2 in FORTRAN.) 72 721.23 T
(     In  the  case  of  the 'i' variations they take arguments of) 72 709.23 T
(     type Icoord in C and integer in FORTRAN.) 72 697.23 T
(     circleprecision\050nsegs\051) 72 673.23 T
(          Set the number of line segments  making  up  a  circle.) 72 661.23 T
(          Default  is  currently 32. The number of segments in an) 72 649.23 T
(          arc is calculated from nsegs according the span of  the) 72 637.23 T
(          arc.  This routine is only available in VOGL.) 72 625.23 T
(               Fortran:) 72 613.23 T
(                    subroutine circleprecision\050nsegs\051) 72 601.23 T
(                    integer   nsegs) 72 589.23 T
(               C:) 72 577.23 T
(                    circleprecision\050nsegs\051) 72 565.23 T
(                         int  nsegs;) 72 553.23 T
(     arc\050x, y, radius, startang, endang\051) 72 517.23 T
(          Draw an arc. x, y,  and  radius  are  values  in  world) 72 505.23 T
(          units.) 72 493.23 T
(               Fortran:) 72 469.23 T
(                    subroutine arc\050x, y, radius, startang, endang\051) 72 457.23 T
(                    real x, y, radius;) 72 445.23 T
(                    integer startang, endang;) 72 433.23 T
(               C:) 72 421.23 T
(                    arc\050x, y, radius, startang, endang\051) 72 409.23 T
(                         Coord  x, y, radius;) 72 397.23 T
(                         Angle  startang, endang;) 72 385.23 T
(     arcf\050x, y, radius, startang, endang\051) 72 349.23 T
(          Draw a filled arc. x, y, and radius are values in world) 72 337.23 T
(          units.  \050How the filling is done may be changed by cal-) 72 325.23 T
(          ling polymode , if this call has  been  compilied  into) 72 313.23 T
(          the library\051.) 72 301.23 T
(               Fortran:) 72 277.23 T
(                    subroutine arcf\050x, y, radius, startang, endang\051) 72 265.23 T
(                    real x, y, radius;) 72 253.23 T
(                    integer startang, endang;) 72 241.23 T
(               C:) 72 229.23 T
(                    arcf\050x, y, radius, startang, endang\051) 72 217.23 T
(                         Coord  x, y, radius;) 72 205.23 T
(                         Angle  startang, endang;) 72 193.23 T
(     circ\050x, y, radius\051) 72 157.23 T
(          Draw a circle. x, y, and radius  are  values  in  world) 72 145.23 T
(          units.) 72 133.23 T
(               Fortran:) 72 109.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   21) 72 61.23 T
FMENDPAGE
%%EndPage: "26" 27
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    subroutine circ\050x, y, radius\051) 72 721.23 T
(                    real x, y, radius) 72 709.23 T
(               C:) 72 697.23 T
(                    circ\050x, y, radius\051) 72 685.23 T
(                         Coord     x, y, radius;) 72 673.23 T
(     circf\050x, y, radius\051) 72 637.23 T
(          Draw a filled circle. x, y, and radius  are  values  in) 72 625.23 T
(          world units.  How the filling is done may be changed by) 72 613.23 T
(          calling polymode.) 72 601.23 T
(               Fortran:) 72 577.23 T
(                    subroutine circf\050x, y, radius\051) 72 565.23 T
(                    real x, y, radius) 72 553.23 T
(               C:) 72 541.23 T
(                    circf\050x, y, radius\051) 72 529.23 T
(                         Coord     x, y, radius;) 72 517.23 T
2 12 Q
(  Curve Routines.) 72 479.9 T
1 10 Q
(     curvebasis\050id\051) 72 467.23 T
(          Set the basis matrix for a curve to the  matrix  refer-) 72 455.23 T
(          enced  by id.  The matrix and it's id are tied together) 72 443.23 T
(          with a call to defbasis.) 72 431.23 T
(               Fortran:) 72 407.23 T
(                    subroutine curvebasis\050id\051) 72 395.23 T
(                    integer id) 72 383.23 T
(               C:) 72 371.23 T
(                    curvebasis\050id\051) 72 359.23 T
(                         short     id;) 72 347.23 T
(     curveprecision\050nsegs\051) 72 311.23 T
(          Define the number of  line  segments  used  to  draw  a) 72 299.23 T
(          curve.) 72 287.23 T
(               Fortran:) 72 263.23 T
(                    subroutine curveprecision\050nsegs\051) 72 251.23 T
(                    integer nsegs) 72 239.23 T
(               C:) 72 215.23 T
(                    curveprecision\050nsegs\051) 72 203.23 T
(                         short     nsegs;) 72 191.23 T
(     rcrv\050geom\051) 72 155.23 T
(          Draw a rational curve.) 72 143.23 T
(               Fortran:) 72 119.23 T
(                    subroutine rcrv\050geom\051) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   22) 72 59.23 T
FMENDPAGE
%%EndPage: "27" 28
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    real geom\0504,4\051) 72 721.23 T
(               C:) 72 709.23 T
(                    rcrv\050geom\051) 72 697.23 T
(                         Coord     geom[4][4];) 72 685.23 T
(     rcrvn\050n, geom\051) 72 649.23 T
(          Draw n - 3 rational curve segments. Note: n must be  at) 72 637.23 T
(          least 4.) 72 625.23 T
(               Fortran:) 72 601.23 T
(                    subroutine rcrvn\050n, geom\051) 72 589.23 T
(                    integer n) 72 577.23 T
(                    real geom\0504,n\051) 72 565.23 T
(               C:) 72 553.23 T
(                    rcrvn\050n, geom\051) 72 541.23 T
(                         long n;) 72 529.23 T
(                         Coord     geom[][4];) 72 517.23 T
(     crv\050geom\051) 72 481.23 T
(          Draw a curve.) 72 469.23 T
(               Fortran:) 72 445.23 T
(                    subroutine crv\050geom\051) 72 433.23 T
(                    real geom\0503,4\051) 72 421.23 T
(               C:) 72 409.23 T
(                    crv\050geom\051) 72 397.23 T
(                         Coord     geom[4][3];) 72 385.23 T
(     crvn\050n, geom\051) 72 349.23 T
(          Draw n - 3 curve segments. Note: n must be at least 4.) 72 337.23 T
(               Fortran:) 72 313.23 T
(                    subroutine crvn\050n, geom\051) 72 301.23 T
(                    integer n) 72 289.23 T
(                    real geom\0503,n\051) 72 277.23 T
(               C:) 72 265.23 T
(                    crvn\050n, geom\051) 72 253.23 T
(                         long n;) 72 241.23 T
(                         Coord     geom[][3];) 72 229.23 T
(     curveit\050n\051) 72 193.23 T
(          Draw a curve segment by iterating the top matrix in the) 72 181.23 T
(          matrix  stack as a forward difference matrix. This per-) 72 169.23 T
(          forms 'n' iterations.) 72 157.23 T
(               Fortran:) 72 133.23 T
(                    subroutine curveit\050n\051) 72 121.23 T
(                    integer n) 72 109.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   23) 72 61.23 T
FMENDPAGE
%%EndPage: "28" 29
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(               C:) 72 721.23 T
(                    curveit\050n\051) 72 709.23 T
(                         short     n;) 72 697.23 T
2 12 Q
(  Rectangles and General Polygon Routines.) 72 659.9 T
1 10 Q
(     See also Vertex  calls  above.   The  way  in  which  filled) 72 647.23 T
(     polygons \050including circles and arcs\051 are treated depends on) 72 635.23 T
(     the mode that has been set with the polymode call.) 72 623.23 T
(     There are variations on all these routines that end  in  's') 72 599.23 T
(     and  also end in 'i'. In the case of the 's' variations they) 72 587.23 T
(     take arguments of type Scoord in C and integer*2 in FORTRAN.) 72 575.23 T
(     In  the  case  of  the 'i' variations they take arguments of) 72 563.23 T
(     type Icoord in C and integer in FORTRAN.) 72 551.23 T
(     rect\050x1, y1, x2, y2\051) 72 527.23 T
(          Draw a rectangle.) 72 515.23 T
(               Fortran:) 72 491.23 T
(                    subroutine rect\050x1, y1, x2, y2\051) 72 479.23 T
(                    real x1, y1, x1, y2) 72 467.23 T
(               C:) 72 455.23 T
(                    rect\050x1, y1, x2, y2\051) 72 443.23 T
(                         Coord     x1, y1, x2, y2;) 72 431.23 T
(     rectf\050x1, y1, x2, y2\051) 72 395.23 T
(          Draw a filled rectangle. \050How the filling is  done  may) 72 383.23 T
(          be  changed by calling polymode , if this call has been) 72 371.23 T
(          compilied into the library\051.) 72 359.23 T
(               Fortran:) 72 335.23 T
(                    subroutine rectf\050x1, y1, x2, y2\051) 72 323.23 T
(                    real x1, y1, x1, y2) 72 311.23 T
(               C:) 72 299.23 T
(                    rectf\050x1, y1, x2, y2\051) 72 287.23 T
(                         Coord     x1, y1, x2, y2;) 72 275.23 T
(     poly2\050n, points\051) 72 239.23 T
(          Construct a \050x, y\051 polygon from an array of points pro-) 72 227.23 T
(          vided by the user.) 72 215.23 T
(               Fortran:) 72 191.23 T
(                    subroutine poly2\050n, points\051) 72 179.23 T
(                    integer n) 72 167.23 T
(                    real points\0502, n\051) 72 155.23 T
(               C:) 72 143.23 T
(                    poly2\050n, points\051) 72 131.23 T
(                         long n;) 72 119.23 T
(                         Coord     points[][2];) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   24) 72 59.23 T
FMENDPAGE
%%EndPage: "29" 30
%%Page: "30" 30
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     polf2\050n, points\051) 72 721.23 T
(          Construct a filled \050x, y\051  polygon  from  an  array  of) 72 709.23 T
(          points  provided by the user.  \050How the filling is done) 72 697.23 T
(          may be changed by calling polymode , if this  call  has) 72 685.23 T
(          been compilied into the library\051.) 72 673.23 T
(               Fortran:) 72 649.23 T
(                    subroutine polf2\050n, points\051) 72 637.23 T
(                    integer n) 72 625.23 T
(                    real points\0502, n\051) 72 613.23 T
(               C:) 72 601.23 T
(                    polf2\050n,  points\051) 72 589.23 T
(                         long n;) 72 577.23 T
(                         Coord     points[][2];) 72 565.23 T
(     poly\050n, points\051) 72 529.23 T
(          Construct a polygon from an array of points provided by) 72 517.23 T
(          the user.) 72 505.23 T
(               Fortran:) 72 481.23 T
(                    subroutine poly\050n, points\051) 72 469.23 T
(                    integer n) 72 457.23 T
(                    real points\0503, n\051) 72 445.23 T
(               C:) 72 433.23 T
(                    poly\050n,  points\051) 72 421.23 T
(                         long n;) 72 409.23 T
(                         float     points[][3];) 72 397.23 T
(     polf\050n, points\051) 72 361.23 T
(          Construct a filled polygon from an array of points pro-) 72 349.23 T
(          vided  by  the  user.   \050How the filling is done may be) 72 337.23 T
(          changed by calling polymode , if  this  call  has  been) 72 325.23 T
(          compilied into the library\051.) 72 313.23 T
(               Fortran:) 72 289.23 T
(                    subroutine polf\050n, points\051) 72 277.23 T
(                    integer n) 72 265.23 T
(                    real points\0503, n\051) 72 253.23 T
(               C:) 72 241.23 T
(                    polf\050n, points\051) 72 229.23 T
(                         long n;) 72 217.23 T
(                         Coord     points[][3];) 72 205.23 T
(     backface\050onoff\051) 72 169.23 T
(          Turns on culling of backfacing polygons. A  polygon  is) 72 157.23 T
(          backfacing  if  it's  orientation in *screen* coords is) 72 145.23 T
(          clockwise.) 72 133.23 T
(               Fortran:) 72 109.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   25) 72 61.23 T
FMENDPAGE
%%EndPage: "30" 31
%%Page: "31" 31
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    subroutine backface\050onoff\051) 72 721.23 T
(                    logical onoff) 72 709.23 T
(               C:) 72 685.23 T
(                    backface\050onoff\051) 72 673.23 T
(                         Boolean   onoff;) 72 661.23 T
(     frontface\050onoff\051) 72 625.23 T
(          Turns on culling of frontfacing polygons. A polygon  is) 72 613.23 T
(          frontfacing  if  it's orientation in *screen* coords is) 72 601.23 T
(          anticlockwise.) 72 589.23 T
(               Fortran:) 72 565.23 T
(                    subroutine frontface\050clockwise\051) 72 553.23 T
(                    logical onoff) 72 541.23 T
(               C:) 72 517.23 T
(                    frontface\050clockwise\051) 72 505.23 T
(                         Boolean   onoff;) 72 493.23 T
2 12 Q
(  Text routines.) 72 455.9 T
1 10 Q
(     The original VOGLE hardware fonts "small" and  "large"  have) 72 443.23 T
(     the  font  numbers 0 and 1 respectively. The default font is) 72 431.23 T
(     0. For X11 displays the default fonts used  by  the  program) 72 419.23 T
(     can  be  overridden by placing the following defaults in the) 72 407.23 T
(     ~/.Xdefaults file:) 72 395.23 T
(          vogl.smallfont: <font name>) 72 383.23 T
(          vogl.largefont: <font name>) 72 371.23 T
(     font\050fontid\051) 72 347.23 T
(          Set the current font) 72 335.23 T
(               Fortran:) 72 311.23 T
(                    subroutine font\050fontid\051) 72 299.23 T
(                    integer fontid;) 72 287.23 T
(               C:) 72 263.23 T
(                    font\050fontid\051) 72 251.23 T
(                         short     fontid;) 72 239.23 T
(     cmov\050x, y, z\051) 72 203.23 T
(          Change the current character position. The usual varia-) 72 191.23 T
(          tions with the extensions 'i' and 's' also apply here.) 72 179.23 T
(               Fortran:) 72 155.23 T
(                    subroutine cmov\050x, y, z\051) 72 143.23 T
(                    real x, y, z;) 72 131.23 T
(               C:) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   26) 72 59.23 T
FMENDPAGE
%%EndPage: "31" 32
%%Page: "32" 32
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    cmov\050x, y, z\051) 72 721.23 T
(                         Coord     x, y, z;) 72 709.23 T
(     cmov2\050x, y\051) 72 673.23 T
(          Change the current character position in x and  y.  The) 72 661.23 T
(          usual  variations  with the extensions 'i' and 's' also) 72 649.23 T
(          apply here.) 72 637.23 T
(               Fortran:) 72 613.23 T
(                    subroutine cmov2\050x, y\051) 72 601.23 T
(                    real x, y;) 72 589.23 T
(               C:) 72 565.23 T
(                    cmov2\050x, y\051) 72 553.23 T
(                         Coord     x, y;) 72 541.23 T
(     getheight\050\051) 72 505.23 T
(          Return the maximum height in the current font.) 72 493.23 T
(               Fortran:) 72 469.23 T
(                    integer function getheight) 72 457.23 T
(               C:) 72 433.23 T
(                    long) 72 421.23 T
(                    getheight\050\051) 72 409.23 T
(     strwidth\050s\051) 72 373.23 T
(          Return the length of the string s in screen coords.) 72 361.23 T
(               Fortran:) 72 337.23 T
(                    integer function strwidth\050s, n\051) 72 325.23 T
(                         character *\050*\051 s) 72 313.23 T
(                         integer   n;) 72 301.23 T
(               C:) 72 277.23 T
(                    long) 72 265.23 T
(                    strwidth\050s\051) 72 253.23 T
(                         char *s;) 72 241.23 T
2 12 Q
(  Transformation Routines) 72 203.9 T
1 10 Q
(     All transformations are cumulative, so if you  rotate  some-) 72 179.23 T
(     thing  and  then do a translate you are translating relative) 72 167.23 T
(     to the rotated axes. If you need  to  preserve  the  current) 72 155.23 T
(     transformation  matrix use pushmatrix\050\051, do the drawing, and) 72 143.23 T
(     then call popmatrix\050\051 to get back where you were before.) 72 131.23 T
(     translate\050x, y, z\051) 72 107.23 T
(          Set up a translation.) 72 95.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   27) 72 59.23 T
FMENDPAGE
%%EndPage: "32" 33
%%Page: "33" 33
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(               Fortran:) 72 721.23 T
(                    subroutine translate\050x, y, z\051) 72 709.23 T
(                    real x, y, z) 72 697.23 T
(               C:) 72 685.23 T
(                    translate\050x, y, z\051) 72 673.23 T
(                         Coord     x, y, z;) 72 661.23 T
(     scale\050x, y, z\051) 72 625.23 T
(          Set up scaling factors in x, y, and z axis.) 72 613.23 T
(               Fortran:) 72 589.23 T
(                    subroutine scale\050x, y, z\051) 72 577.23 T
(                    real x, y, z) 72 565.23 T
(               C:) 72 541.23 T
(                    scale\050x, y, z\051) 72 529.23 T
(                         Coord     x, y, z;) 72 517.23 T
(     rot\050angle, axis\051) 72 481.23 T
(          Set up a rotation in axis axis. Axis  is  one  of  'x',) 72 469.23 T
(          'y',  or  'z'.  The angle in this case is a real number) 72 457.23 T
(          in degrees.) 72 445.23 T
(               Fortran:) 72 421.23 T
(                    subroutine rot\050angle, axis\051) 72 409.23 T
(                    real angle) 72 397.23 T
(                    character axis) 72 385.23 T
(               C:) 72 361.23 T
(                    rot\050angle, axis\051) 72 349.23 T
(                         float     angle;) 72 337.23 T
(                         char axis;) 72 325.23 T
(     rotate\050angle, axis\051) 72 289.23 T
(          Set up a rotation in axis axis. Axis  is  one  of  'x',) 72 277.23 T
(          'y',  or  'z',  and  the angle is in tenths of degrees.) 72 265.23 T
(          Makes you feel sentimental doesn't it.) 72 253.23 T
(               Fortran:) 72 229.23 T
(                    subroutine rotate\050angle, axis\051) 72 217.23 T
(                    integer angle) 72 205.23 T
(                    character axis) 72 193.23 T
(               C:) 72 169.23 T
(                    rotate\050angle, axis\051) 72 157.23 T
(                         Angle     angle;) 72 145.23 T
(                         char axis;) 72 133.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   28) 72 61.23 T
FMENDPAGE
%%EndPage: "33" 34
%%Page: "34" 34
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
2 12 Q
(  Patch Routines.) 72 719.9 T
1 10 Q
(     patchbasis\050tbasisid, ubasisid\051) 72 707.23 T
(          Define the t and u basis matrix id's of a patch. It  is) 72 695.23 T
(          assumed  that tbasisid and ubasisid have matrices asso-) 72 683.23 T
(          ciated with  them  already  \050this  is  done  using  the) 72 671.23 T
(          defbasis call\051.) 72 659.23 T
(               Fortran:) 72 635.23 T
(                    subroutine patchbasis\050tid, uid\051) 72 623.23 T
(                    integer tid, uid) 72 611.23 T
(               C:) 72 587.23 T
(                    patchbasis\050tid, ubid\051) 72 575.23 T
(                         long tid, uid) 72 563.23 T
(     patchprecision\050tseg, useg\051) 72 527.23 T
(          Set the minimum  number  of  line  segments  making  up) 72 515.23 T
(          curves in a patch.) 72 503.23 T
(               Fortran:) 72 479.23 T
(                    subroutine patchprecision\050tseg, useg\051) 72 467.23 T
(                    integer tseg, useg) 72 455.23 T
(               C:) 72 431.23 T
(                    patchprecision\050tseg, useg\051) 72 419.23 T
(                         long     tseg, useg;) 72 407.23 T
(     patchcurves\050nt, nu\051) 72 371.23 T
(          Set the number of curves making up a patch.) 72 359.23 T
(               Fortran:) 72 335.23 T
(                    subroutine patchcurves\050nt, nu\051) 72 323.23 T
(                    integer nt, nu) 72 311.23 T
(               C:) 72 287.23 T
(                    patchcurves\050nt, nu\051) 72 275.23 T
(                         long     nt, nu;) 72 263.23 T
(     rpatch\050gx, gy, gz, gw\051) 72 227.23 T
(          Draws a rational patch in the current basis,  according) 72 215.23 T
(          to the geometry matrices gx, gy, gz, and gw.) 72 203.23 T
(               Fortran:) 72 179.23 T
(                    subroutine rpatch\050gx, gy, gz, gw\051) 72 167.23 T
(                    real  gx\0504,4\051, gy\0504,4\051, gz\0504,4\051, gw\0504,4\051) 72 155.23 T
(               C:) 72 131.23 T
(                    rpatch\050gx, gy, gz, gw\051) 72 119.23 T
(                        Matrix  gx, gy, gz, gw;) 72 107.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   29) 72 59.23 T
FMENDPAGE
%%EndPage: "34" 35
%%Page: "35" 35
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     patch\050gx, gy, gz\051) 72 721.23 T
(          Draws a patch in the current basis,  according  to  the) 72 709.23 T
(          geometry matrices gx, gy, and gz.) 72 697.23 T
(               Fortran:) 72 673.23 T
(                    subroutine patch\050gx, gy, gz\051) 72 661.23 T
(                    real  gx\0504,4\051, gy\0504,4\051, gz\0504,4\051) 72 649.23 T
(               C:) 72 625.23 T
(                    patch\050gx, gy, gz\051) 72 613.23 T
(                         Matrix  gx, gy, gz;) 72 601.23 T
2 12 Q
(  Point Routines.) 72 563.9 T
1 10 Q
(     There are variations on all these routines that end  in  's') 72 551.23 T
(     and  also end in 'i'. In the case of the 's' variations they) 72 539.23 T
(     take arguments of type Scoord in C and integer*2 in FORTRAN.) 72 527.23 T
(     In  the  case  of  the 'i' variations they take arguments of) 72 515.23 T
(     type Icoord in C and integer in FORTRAN.) 72 503.23 T
(     pnt\050x, y, z\051) 72 479.23 T
(          Draw a point at x, y, z) 72 467.23 T
(               Fortran:) 72 443.23 T
(                    subroutine pnt\050x, y, z\051) 72 431.23 T
(                    real x, y, z) 72 419.23 T
(               C:) 72 395.23 T
(                    pnt\050x, y, z\051) 72 383.23 T
(                         Coord     x, y, z;) 72 371.23 T
(     pnt2\050x, y\051) 72 335.23 T
(          Draw a point at x, y.) 72 323.23 T
(               Fortran:) 72 299.23 T
(                    subroutine pnt2\050x, y\051) 72 287.23 T
(                    real x, y) 72 275.23 T
(               C:) 72 251.23 T
(                    pnt2\050x, y\051) 72 239.23 T
(                         Coord     x, y;) 72 227.23 T
2 12 Q
(  Object Routines.) 72 189.9 T
1 10 Q
(     Objects are graphical entities created by the  drawing  rou-) 72 177.23 T
(     tines  called  between  makeobj and closeobj. Objects may be) 72 165.23 T
(     called from within other objects. When an object is  created) 72 153.23 T
(     most  of  the  calculations required by the drawing routines) 72 141.23 T
(     called within it are  done  up  to  where  the  calculations) 72 129.23 T
(     involve the current transformation matrix. So if you need to) 72 117.23 T
(     draw the same thing several  times  on  the  screen  but  in) 72 105.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   30) 72 57.23 T
FMENDPAGE
%%EndPage: "35" 36
%%Page: "36" 36
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(     different  places  it  is faster to use objects than to call) 72 721.23 T
(     the appropriate drawing routines each time.) 72 709.23 T
(     makeobj\050n\051) 72 685.23 T
(          Commence the object number n.) 72 673.23 T
(               Fortran:) 72 649.23 T
(                    subroutine makeobj\050n\051) 72 637.23 T
(                    integer n) 72 625.23 T
(               C:) 72 601.23 T
(                    makeobj\050n\051) 72 589.23 T
(                         Object    n;) 72 577.23 T
(     closeobj\050\051) 72 541.23 T
(          Close the current object.) 72 529.23 T
(               Fortran:) 72 505.23 T
(                    subroutine closeobj\050\051) 72 493.23 T
(               C:) 72 469.23 T
(                    closeobj\050\051) 72 457.23 T
(     genobj\050\051) 72 421.23 T
(          Returns a unique object identifier.) 72 409.23 T
(               Fortran:) 72 385.23 T
(                    integer function genobj\050\051) 72 373.23 T
(               C:) 72 349.23 T
(                    Object) 72 337.23 T
(                    genobj\050\051) 72 325.23 T
(     getopenobj\050\051) 72 289.23 T
(          Return the number of the current object.) 72 277.23 T
(               Fortran:) 72 253.23 T
(                    integer function getopenobj\050\051) 72 241.23 T
(               C:) 72 217.23 T
(                    Object) 72 205.23 T
(                    getopenobj\050\051) 72 193.23 T
(     callobj\050n\051) 72 157.23 T
(          Draw object number n.) 72 145.23 T
(               Fortran:) 72 121.23 T
(                    subroutine callobj\050n\051) 72 109.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   31) 72 61.23 T
FMENDPAGE
%%EndPage: "36" 37
%%Page: "37" 37
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(                    integer n) 72 721.23 T
(               C:) 72 697.23 T
(                    callobj\050n\051) 72 685.23 T
(                         Object    n;) 72 673.23 T
(     isobj\050n\051) 72 637.23 T
(          Returns non-zero if there is an object of number n.) 72 625.23 T
(               Fortran:) 72 601.23 T
(                    logical function isobj\050n\051) 72 589.23 T
(                    integer n) 72 577.23 T
(               C:) 72 553.23 T
(                    Boolean) 72 541.23 T
(                    isobj\050n\051) 72 529.23 T
(                         Object    n;) 72 517.23 T
(     delobj\050n\051) 72 481.23 T
(          Delete the object number n.) 72 469.23 T
(               Fortran:) 72 445.23 T
(                    subroutine delobj\050n\051) 72 433.23 T
(                    integer n) 72 421.23 T
(               C:) 72 397.23 T
(                    delobj\050n\051) 72 385.23 T
(                         Object    n;) 72 373.23 T
2 12 Q
(  Double Buffering.) 72 335.9 T
1 10 Q
(     Where possible VOGL allows for front  and  back  buffers  to) 72 323.23 T
(     enable  things  like  animation  and  smooth updating of the) 72 311.23 T
(     screen. Note: it  isn't  possible  to  have  backbuffer  and) 72 299.23 T
(     frontbuffer true at the same time.) 72 287.23 T
(     gconfig) 72 263.23 T
(          With Iris GL you must  call  gconfig  for  things  like) 72 251.23 T
(          doublebuffering to take effect.) 72 239.23 T
(               Fortran:) 72 215.23 T
(                    subroutine gconfig) 72 203.23 T
(               C:) 72 179.23 T
(                    gconfig\050\051) 72 167.23 T
(     doublebuffer) 72 131.23 T
(          Flags our intention to do double buffering.) 72 119.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   32) 72 59.23 T
FMENDPAGE
%%EndPage: "37" 38
%%Page: "38" 38
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
(               Fortran:) 72 721.23 T
(                    subroutine doublebuffer) 72 709.23 T
(               C:) 72 685.23 T
(                    doublebuffer\050\051) 72 673.23 T
(     singlebuffer) 72 637.23 T
(          Switch back to singlebuffer mode.) 72 625.23 T
(               Fortran:) 72 601.23 T
(                    subroutine singlebuffer) 72 589.23 T
(               C:) 72 565.23 T
(                    singlebuffer\050\051) 72 553.23 T
(     backbuffer\050Boolean\051) 72 517.23 T
(          Make VOGL draw in the backbuffer.) 72 505.23 T
(               Fortran:) 72 481.23 T
(                    subroutine backbuffer\050yesno\051) 72 469.23 T
(                         logical   yesno;) 72 457.23 T
(               C:) 72 433.23 T
(                    backbuffer\050yesno\051) 72 421.23 T
(                         Boolean   yesno;) 72 409.23 T
(     frontbuffer\050Boolean\051) 72 373.23 T
(          Make VOGL draw in the front buffer.) 72 361.23 T
(               Fortran:) 72 337.23 T
(                    subroutine frontbuffer\050yesno\051) 72 325.23 T
(                         logical   yesno;) 72 313.23 T
(               C:) 72 289.23 T
(                    frontbuffer\050yesno\051) 72 277.23 T
(                         Boolean   yesno;) 72 265.23 T
(     swapbuffers\050\051) 72 229.23 T
(          Swap the front and back buffers.) 72 217.23 T
(               Fortran:) 72 193.23 T
(                    subroutine swapbuffers) 72 181.23 T
(               C:) 72 157.23 T
(                    swapbuffers\050\051) 72 145.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   33) 72 61.23 T
FMENDPAGE
%%EndPage: "38" 39
%%Page: "39" 39
595.3 841.9 0 FMBEGINPAGE
72 22.9 558 823.9 R
7 X
0 K
V
1 10 Q
0 X
(VOGL\0503\051                C LIBRARY FUNCTIONS                VOGL\0503\051) 72 769.23 T
2 12 Q
(  Position Routines.) 72 719.9 T
1 10 Q
(     getgpos\050x, y, z, w\051) 72 707.23 T
(          Gets the current graphics position in world coords.) 72 695.23 T
(               Fortran:) 72 671.23 T
(                    subroutine getgpos\050x, y, z, w\051) 72 659.23 T
(                    real x, y, z) 72 647.23 T
(               C:) 72 623.23 T
(                    getgpos\050x, y, z, w\051) 72 611.23 T
(                         Coord *x, *y, *z, *w;) 72 599.23 T
(     getcpos\050ix, iy\051) 72 563.23 T
(          Gets the current character position in screen coords.) 72 551.23 T
(               Fortran:) 72 527.23 T
(                    subroutine getcpo\050ix, iy\051) 72 515.23 T
(                    integer ix, iy) 72 503.23 T
(               C:) 72 479.23 T
(                    getcpos\050ix, iy\051) 72 467.23 T
(                         Scoord *ix, *iy;) 72 455.23 T
2 12 Q
(BUGS) 72 417.9 T
1 10 Q
(     Double buffering isn't supported on all devices.) 72 405.23 T
(     The yobbarays may be turned on or they may be turned off.) 72 381.23 T
(VOGL 1.2.8          Last change: 12 Oct 1993                   34) 72 57.23 T
FMENDPAGE
%%EndPage: "39" 40
%%Page: "40" 40
595.3 841.9 0 FMBEGINPAGE
72 22.9 306 823.9 R
7 X
0 K
V
2 18 Q
0 X
(INDEX) 72 811.9 T
1 10 Q
(arc, arcf) 72 792.23 T
( 21) 279.01 792.23 T
(Arcs and Circles) 72 782.23 T
( 20) 279.01 782.23 T
(Attribute Stack Routines) 72 772.23 T
( 12) 279.01 772.23 T
(backbuffer, frontbuffer) 72 752.23 T
( 33) 279.01 752.23 T
(backface, frontface) 72 742.23 T
( 25) 279.01 742.23 T
(bgnclosedline, endclosedline) 72 732.23 T
( 20) 279.01 732.23 T
(bgnline, endline) 72 722.23 T
( 19) 279.01 722.23 T
(bgnpoint, endpoint) 72 712.23 T
( 19) 279.01 712.23 T
(bgnpolygone, endpolygon) 72 702.23 T
( 20) 279.01 702.23 T
(BUGS) 72 692.23 T
( 34) 279.01 692.23 T
(callobj) 72 672.23 T
( 31) 279.01 672.23 T
(circ, circf) 72 662.23 T
( 21) 279.01 662.23 T
(circleprecision) 72 652.23 T
( 21) 279.01 652.23 T
(clear) 72 642.23 T
( 7) 285.01 642.23 T
(closeobj) 72 632.23 T
( 31) 279.01 632.23 T
(cmov) 72 622.23 T
( 26) 279.01 622.23 T
(cmov2) 72 612.23 T
( 27) 279.01 612.23 T
(color) 72 602.23 T
( 7) 285.01 602.23 T
(colorf) 72 592.23 T
( 7) 285.01 592.23 T
(crv, crvn) 72 582.23 T
( 23) 279.01 582.23 T
(Curve Routines) 72 572.23 T
( 22) 279.01 572.23 T
(curvebasis) 72 562.23 T
( 22) 279.01 562.23 T
(curveit) 72 552.23 T
( 23) 279.01 552.23 T
(curveprecision) 72 542.23 T
(22) 285.01 542.23 T
(defbasis) 72 522.23 T
( 8) 285.01 522.23 T
(deflinestyle) 72 512.23 T
( 16) 279.01 512.23 T
(delobj) 72 502.23 T
( 32) 279.01 502.23 T
(Device Queue and Valuator Routines) 72 492.23 T
( 9) 285.01 492.23 T
(Device Routines) 72 482.23 T
( 2) 285.01 482.23 T
(Double Buffering) 72 472.23 T
( 32) 279.01 472.23 T
(doublebuffer, singlebuffer) 72 462.23 T
( 32) 279.01 462.23 T
(draw) 72 452.23 T
( 17) 279.01 452.23 T
(draw2) 72 442.23 T
( 17) 279.01 442.23 T
(Drawing Routines) 72 432.23 T
( 17) 279.01 432.23 T
(font) 72 412.23 T
( 26) 279.01 412.23 T
(gconfig) 72 392.23 T
( 32) 279.01 392.23 T
(General Routines) 72 382.23 T
( 7) 285.01 382.23 T
(genobj) 72 372.23 T
( 31) 279.01 372.23 T
(getbutton) 72 362.23 T
( 10) 279.01 362.23 T
(getcpos) 72 352.23 T
( 34) 279.01 352.23 T
(getgpos) 72 342.23 T
( 34) 279.01 342.23 T
(getheight) 72 332.23 T
( 27) 279.01 332.23 T
(getopenobj) 72 322.23 T
( 31) 279.01 322.23 T
(getvaluator) 72 312.23 T
( 10) 279.01 312.23 T
(getviewport) 72 302.23 T
( 11) 279.01 302.23 T
(gexit) 72 292.23 T
( 4) 285.01 292.23 T
(ginit) 72 282.23 T
( 3) 285.01 282.23 T
(Include Files) 72 262.23 T
( 1) 285.01 262.23 T
(isobj) 72 252.23 T
( 32) 279.01 252.23 T
(isqueued) 72 242.23 T
( 10) 279.01 242.23 T
(Line Routines) 72 222.23 T
( 16) 279.01 222.23 T
(linewidth) 72 212.23 T
( 16) 279.01 212.23 T
(lookat) 72 202.23 T
( 14) 279.01 202.23 T
(makeobj) 72 182.23 T
( 31) 279.01 182.23 T
(mapcolor) 72 172.23 T
( 8) 285.01 172.23 T
(Matrix Stack Routines) 72 162.23 T
( 13) 279.01 162.23 T
(move) 72 152.23 T
( 15) 279.01 152.23 T
(Move Routines) 72 142.23 T
( 15) 279.01 142.23 T
(move2) 72 132.23 T
( 15) 279.01 132.23 T
(Name and Description) 72 112.23 T
( 1) 285.01 112.23 T
(Object Routines) 72 92.23 T
( 30) 279.01 92.23 T
(ortho) 72 82.23 T
( 12) 279.01 82.23 T
(ortho2) 72 72.23 T
( 13) 279.01 72.23 T
(Overview) 72 62.23 T
( 1) 285.01 62.23 T
(patch) 72 42.23 T
( 30) 279.01 42.23 T
(Patch Routines) 72 32.24 T
( 29) 279.01 32.24 T
324 22.9 558 823.9 R
7 X
V
0 X
(patchbasis) 324 817.23 T
( 29) 531.01 817.23 T
(patchcurves) 324 807.23 T
( 29) 531.01 807.23 T
(patchprecision) 324 797.23 T
( 29) 531.01 797.23 T
(perspective) 324 787.23 T
( 13) 531.01 787.23 T
(pnt) 324 777.23 T
( 30) 531.01 777.23 T
(pnt2) 324 767.23 T
( 30) 531.01 767.23 T
(Point Routines) 324 757.23 T
( 30) 531.01 757.23 T
(polarview) 324 747.23 T
( 14) 531.01 747.23 T
(poly, polf) 324 737.23 T
( 25) 531.01 737.23 T
(poly2, polf2) 324 727.23 T
( 24) 531.01 727.23 T
(polymode) 324 717.23 T
( 8) 537.01 717.23 T
(popattributes) 324 707.23 T
( 12) 531.01 707.23 T
(popmatrix) 324 697.23 T
( 14) 531.01 697.23 T
(popviewport) 324 687.23 T
( 11) 531.01 687.23 T
(Position Routines) 324 677.23 T
( 34) 531.01 677.23 T
(prefposition) 324 667.23 T
( 6) 537.01 667.23 T
(prefsize) 324 657.23 T
( 6) 537.01 657.23 T
(Projection Routines) 324 647.23 T
( 12) 531.01 647.23 T
(pushattributes) 324 637.23 T
( 12) 531.01 637.23 T
(pushmatrix) 324 627.23 T
( 13) 531.01 627.23 T
(pushviewport) 324 617.23 T
( 11) 531.01 617.23 T
(qdevice) 324 597.23 T
( 9) 537.01 597.23 T
(qread) 324 587.23 T
( 9) 537.01 587.23 T
(qreset) 324 577.23 T
( 10) 531.01 577.23 T
(qtest) 324 567.23 T
( 10) 531.01 567.23 T
(rcrv, rcvrn) 324 547.23 T
(22) 537.01 547.23 T
(rdr) 324 537.23 T
( 17) 531.01 537.23 T
(rdr2) 324 527.23 T
( 17) 531.01 527.23 T
(rect, rectf) 324 517.23 T
( 24) 531.01 517.23 T
(Rectangles and General) 324 507.23 T
(Polygon Routines) 324 497.23 T
( 24) 531.01 497.23 T
(reshapeviewport) 324 487.23 T
( 7) 537.01 487.23 T
(rmv) 324 477.23 T
( 15) 531.01 477.23 T
(rmv2) 324 467.23 T
( 15) 531.01 467.23 T
(rot) 324 457.23 T
( 28) 531.01 457.23 T
(rotate) 324 447.23 T
( 28) 531.01 447.23 T
(Routines for Controlling) 324 437.23 T
(Flushing or Synchronisation) 324 427.23 T
( 5) 537.01 427.23 T
(Routines for Setting Up Windows) 324 417.23 T
( 6) 537.01 417.23 T
(rpatch) 324 407.23 T
( 29) 531.01 407.23 T
(scale) 324 387.23 T
( 28) 531.01 387.23 T
(setlinestyle) 324 377.23 T
( 16) 531.01 377.23 T
(strwidth) 324 367.23 T
( 27) 531.01 367.23 T
(swapbuffers) 324 357.23 T
( 33) 531.01 357.23 T
(Text Routines) 324 337.23 T
( 26) 531.01 337.23 T
(Transformation Routines) 324 327.23 T
( 27) 531.01 327.23 T
(translate) 324 317.23 T
( 27) 531.01 317.23 T
(unqdevice) 324 297.23 T
( 9) 537.01 297.23 T
(Using X Toolkits and Sunview) 324 287.23 T
( 1) 537.01 287.23 T
(v4d, v4f, v4i, v4s) 324 267.23 T
( 18) 531.01 267.23 T
(Vertex Calls) 324 257.23 T
( 18) 531.01 257.23 T
(vflush) 324 247.23 T
( 6) 537.01 247.23 T
(Viewpoint Routines) 324 237.23 T
( 14) 531.01 237.23 T
(viewport) 324 227.23 T
( 11) 531.01 227.23 T
(Viewport Routines) 324 217.23 T
( 11) 531.01 217.23 T
(vinit) 324 207.23 T
( 2) 537.01 207.23 T
(vnewdev) 324 197.23 T
( 5) 537.01 197.23 T
(voutput) 324 187.23 T
( 4) 537.01 187.23 T
(vsetflush) 324 177.23 T
( 5) 537.01 177.23 T
(window) 324 157.23 T
( 13) 531.01 157.23 T
(winopen) 324 147.23 T
( 4) 537.01 147.23 T
FMENDPAGE
%%EndPage: "40" 41
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%Pages: 40 1
%%DocumentFonts: Times-Bold
%%+ Courier
%%+ Courier-Bold
